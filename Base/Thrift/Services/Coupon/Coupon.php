<?php
namespace Services\Coupon;
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface CouponIf {
  /**
   * @param int $typeId
   * @return (array)[]
   */
  public function getCouponLq($typeId);
  /**
   * @param int $uid
   * @param int $type_id
   * @param array $perm
   * @return \Services\Coupon\JsonResult
   */
  public function sendCouponLq($uid, $type_id, array $perm);
  /**
   * @param int $uid
   * @return (array)[]
   */
  public function getUserCouponLq($uid);
  /**
   * @param int $typeId
   * @param int $couponId
   * @return (array)[]
   */
  public function getCoupon($typeId, $couponId);
  /**
   * @param int $uid
   * @param int $couponId
   * @return \Services\Coupon\JsonResult
   */
  public function sendCoupon($uid, $couponId);
  /**
   * @param int $uid
   * @param int $typeId
   * @return (array)[]
   */
  public function getUserCoupon($uid, $typeId);
}


class CouponClient implements \Services\Coupon\CouponIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getCouponLq($typeId)
  {
    $this->send_getCouponLq($typeId);
    return $this->recv_getCouponLq();
  }

  public function send_getCouponLq($typeId)
  {
    $args = new \Services\Coupon\Coupon_getCouponLq_args();
    $args->typeId = $typeId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCouponLq', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCouponLq', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCouponLq()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Coupon\Coupon_getCouponLq_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Coupon\Coupon_getCouponLq_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCouponLq failed: unknown result");
  }

  public function sendCouponLq($uid, $type_id, array $perm)
  {
    $this->send_sendCouponLq($uid, $type_id, $perm);
    return $this->recv_sendCouponLq();
  }

  public function send_sendCouponLq($uid, $type_id, array $perm)
  {
    $args = new \Services\Coupon\Coupon_sendCouponLq_args();
    $args->uid = $uid;
    $args->type_id = $type_id;
    $args->perm = $perm;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendCouponLq', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendCouponLq', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendCouponLq()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Coupon\Coupon_sendCouponLq_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Coupon\Coupon_sendCouponLq_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("sendCouponLq failed: unknown result");
  }

  public function getUserCouponLq($uid)
  {
    $this->send_getUserCouponLq($uid);
    return $this->recv_getUserCouponLq();
  }

  public function send_getUserCouponLq($uid)
  {
    $args = new \Services\Coupon\Coupon_getUserCouponLq_args();
    $args->uid = $uid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserCouponLq', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserCouponLq', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserCouponLq()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Coupon\Coupon_getUserCouponLq_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Coupon\Coupon_getUserCouponLq_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserCouponLq failed: unknown result");
  }

  public function getCoupon($typeId, $couponId)
  {
    $this->send_getCoupon($typeId, $couponId);
    return $this->recv_getCoupon();
  }

  public function send_getCoupon($typeId, $couponId)
  {
    $args = new \Services\Coupon\Coupon_getCoupon_args();
    $args->typeId = $typeId;
    $args->couponId = $couponId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Coupon\Coupon_getCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Coupon\Coupon_getCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCoupon failed: unknown result");
  }

  public function sendCoupon($uid, $couponId)
  {
    $this->send_sendCoupon($uid, $couponId);
    return $this->recv_sendCoupon();
  }

  public function send_sendCoupon($uid, $couponId)
  {
    $args = new \Services\Coupon\Coupon_sendCoupon_args();
    $args->uid = $uid;
    $args->couponId = $couponId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Coupon\Coupon_sendCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Coupon\Coupon_sendCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("sendCoupon failed: unknown result");
  }

  public function getUserCoupon($uid, $typeId)
  {
    $this->send_getUserCoupon($uid, $typeId);
    return $this->recv_getUserCoupon();
  }

  public function send_getUserCoupon($uid, $typeId)
  {
    $args = new \Services\Coupon\Coupon_getUserCoupon_args();
    $args->uid = $uid;
    $args->typeId = $typeId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Coupon\Coupon_getUserCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Coupon\Coupon_getUserCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserCoupon failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class Coupon_getCouponLq_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'typeId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $typeId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['typeId'])) {
        $this->typeId = $vals['typeId'];
      }
    }
  }

  public function getName() {
    return 'Coupon_getCouponLq_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->typeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coupon_getCouponLq_args');
    if ($this->typeId !== null) {
      $xfer += $output->writeFieldBegin('typeId', TType::I32, 1);
      $xfer += $output->writeI32($this->typeId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coupon_getCouponLq_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Coupon_getCouponLq_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size9 = 0;
            $_etype12 = 0;
            $xfer += $input->readListBegin($_etype12, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $elem14 = null;
              $elem14 = array();
              $_size15 = 0;
              $_ktype16 = 0;
              $_vtype17 = 0;
              $xfer += $input->readMapBegin($_ktype16, $_vtype17, $_size15);
              for ($_i19 = 0; $_i19 < $_size15; ++$_i19)
              {
                $key20 = '';
                $val21 = '';
                $xfer += $input->readString($key20);
                $xfer += $input->readString($val21);
                $elem14[$key20] = $val21;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem14;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coupon_getCouponLq_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter22)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter22));
              {
                foreach ($iter22 as $kiter23 => $viter24)
                {
                  $xfer += $output->writeString($kiter23);
                  $xfer += $output->writeString($viter24);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coupon_sendCouponLq_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'type_id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'perm',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $type_id = null;
  /**
   * @var array
   */
  public $perm = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['type_id'])) {
        $this->type_id = $vals['type_id'];
      }
      if (isset($vals['perm'])) {
        $this->perm = $vals['perm'];
      }
    }
  }

  public function getName() {
    return 'Coupon_sendCouponLq_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->perm = array();
            $_size25 = 0;
            $_ktype26 = 0;
            $_vtype27 = 0;
            $xfer += $input->readMapBegin($_ktype26, $_vtype27, $_size25);
            for ($_i29 = 0; $_i29 < $_size25; ++$_i29)
            {
              $key30 = '';
              $val31 = '';
              $xfer += $input->readString($key30);
              $xfer += $input->readString($val31);
              $this->perm[$key30] = $val31;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coupon_sendCouponLq_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type_id !== null) {
      $xfer += $output->writeFieldBegin('type_id', TType::I32, 2);
      $xfer += $output->writeI32($this->type_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->perm !== null) {
      if (!is_array($this->perm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('perm', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->perm));
        {
          foreach ($this->perm as $kiter32 => $viter33)
          {
            $xfer += $output->writeString($kiter32);
            $xfer += $output->writeString($viter33);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coupon_sendCouponLq_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Services\Coupon\JsonResult',
      ),
    );

  /**
   * @var \Services\Coupon\JsonResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Coupon_sendCouponLq_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\Coupon\JsonResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coupon_sendCouponLq_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coupon_getUserCouponLq_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'Coupon_getUserCouponLq_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coupon_getUserCouponLq_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coupon_getUserCouponLq_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Coupon_getUserCouponLq_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size34 = 0;
            $_etype37 = 0;
            $xfer += $input->readListBegin($_etype37, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $elem39 = null;
              $elem39 = array();
              $_size40 = 0;
              $_ktype41 = 0;
              $_vtype42 = 0;
              $xfer += $input->readMapBegin($_ktype41, $_vtype42, $_size40);
              for ($_i44 = 0; $_i44 < $_size40; ++$_i44)
              {
                $key45 = '';
                $val46 = '';
                $xfer += $input->readString($key45);
                $xfer += $input->readString($val46);
                $elem39[$key45] = $val46;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem39;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coupon_getUserCouponLq_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter47)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter47));
              {
                foreach ($iter47 as $kiter48 => $viter49)
                {
                  $xfer += $output->writeString($kiter48);
                  $xfer += $output->writeString($viter49);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coupon_getCoupon_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'typeId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'couponId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $typeId = null;
  /**
   * @var int
   */
  public $couponId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['typeId'])) {
        $this->typeId = $vals['typeId'];
      }
      if (isset($vals['couponId'])) {
        $this->couponId = $vals['couponId'];
      }
    }
  }

  public function getName() {
    return 'Coupon_getCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->typeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->couponId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coupon_getCoupon_args');
    if ($this->typeId !== null) {
      $xfer += $output->writeFieldBegin('typeId', TType::I32, 1);
      $xfer += $output->writeI32($this->typeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponId !== null) {
      $xfer += $output->writeFieldBegin('couponId', TType::I32, 2);
      $xfer += $output->writeI32($this->couponId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coupon_getCoupon_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Coupon_getCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size50 = 0;
            $_etype53 = 0;
            $xfer += $input->readListBegin($_etype53, $_size50);
            for ($_i54 = 0; $_i54 < $_size50; ++$_i54)
            {
              $elem55 = null;
              $elem55 = array();
              $_size56 = 0;
              $_ktype57 = 0;
              $_vtype58 = 0;
              $xfer += $input->readMapBegin($_ktype57, $_vtype58, $_size56);
              for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
              {
                $key61 = '';
                $val62 = '';
                $xfer += $input->readString($key61);
                $xfer += $input->readString($val62);
                $elem55[$key61] = $val62;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem55;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coupon_getCoupon_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter63)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter63));
              {
                foreach ($iter63 as $kiter64 => $viter65)
                {
                  $xfer += $output->writeString($kiter64);
                  $xfer += $output->writeString($viter65);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coupon_sendCoupon_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'couponId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $couponId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['couponId'])) {
        $this->couponId = $vals['couponId'];
      }
    }
  }

  public function getName() {
    return 'Coupon_sendCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->couponId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coupon_sendCoupon_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponId !== null) {
      $xfer += $output->writeFieldBegin('couponId', TType::I32, 2);
      $xfer += $output->writeI32($this->couponId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coupon_sendCoupon_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Services\Coupon\JsonResult',
      ),
    );

  /**
   * @var \Services\Coupon\JsonResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Coupon_sendCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\Coupon\JsonResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coupon_sendCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coupon_getUserCoupon_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'typeId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $typeId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['typeId'])) {
        $this->typeId = $vals['typeId'];
      }
    }
  }

  public function getName() {
    return 'Coupon_getUserCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->typeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coupon_getUserCoupon_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeId !== null) {
      $xfer += $output->writeFieldBegin('typeId', TType::I32, 2);
      $xfer += $output->writeI32($this->typeId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coupon_getUserCoupon_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Coupon_getUserCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size66 = 0;
            $_etype69 = 0;
            $xfer += $input->readListBegin($_etype69, $_size66);
            for ($_i70 = 0; $_i70 < $_size66; ++$_i70)
            {
              $elem71 = null;
              $elem71 = array();
              $_size72 = 0;
              $_ktype73 = 0;
              $_vtype74 = 0;
              $xfer += $input->readMapBegin($_ktype73, $_vtype74, $_size72);
              for ($_i76 = 0; $_i76 < $_size72; ++$_i76)
              {
                $key77 = '';
                $val78 = '';
                $xfer += $input->readString($key77);
                $xfer += $input->readString($val78);
                $elem71[$key77] = $val78;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem71;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coupon_getUserCoupon_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter79)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter79));
              {
                foreach ($iter79 as $kiter80 => $viter81)
                {
                  $xfer += $output->writeString($kiter80);
                  $xfer += $output->writeString($viter81);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CouponProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_getCouponLq($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Coupon\Coupon_getCouponLq_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Coupon\Coupon_getCouponLq_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Coupon\Coupon_getCouponLq_result();
    $result->success = $this->handler_->getCouponLq($args->typeId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getCouponLq', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getCouponLq', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_sendCouponLq($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Coupon\Coupon_sendCouponLq_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Coupon\Coupon_sendCouponLq_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Coupon\Coupon_sendCouponLq_result();
    $result->success = $this->handler_->sendCouponLq($args->uid, $args->type_id, $args->perm);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'sendCouponLq', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('sendCouponLq', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getUserCouponLq($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Coupon\Coupon_getUserCouponLq_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Coupon\Coupon_getUserCouponLq_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Coupon\Coupon_getUserCouponLq_result();
    $result->success = $this->handler_->getUserCouponLq($args->uid);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getUserCouponLq', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getUserCouponLq', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getCoupon($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Coupon\Coupon_getCoupon_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Coupon\Coupon_getCoupon_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Coupon\Coupon_getCoupon_result();
    $result->success = $this->handler_->getCoupon($args->typeId, $args->couponId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getCoupon', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getCoupon', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_sendCoupon($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Coupon\Coupon_sendCoupon_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Coupon\Coupon_sendCoupon_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Coupon\Coupon_sendCoupon_result();
    $result->success = $this->handler_->sendCoupon($args->uid, $args->couponId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'sendCoupon', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('sendCoupon', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getUserCoupon($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Coupon\Coupon_getUserCoupon_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Coupon\Coupon_getUserCoupon_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Coupon\Coupon_getUserCoupon_result();
    $result->success = $this->handler_->getUserCoupon($args->uid, $args->typeId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getUserCoupon', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getUserCoupon', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

