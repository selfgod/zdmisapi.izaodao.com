<?php
namespace Services\SasUpdate;
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface SasUpdateIf {
  /**
   * @param string $startTime
   * @param string $endTime
   * @return (array)[]
   */
  public function getSasLessonIdByEndTime($startTime, $endTime);
  /**
   * @param string $startTime
   * @param string $endTime
   * @return (array)[]
   */
  public function getSasLessonIdByStartTime($startTime, $endTime);
  /**
   * @param int $uid
   * @param int $schedule_id
   * @param int $is_join
   * @return bool
   */
  public function insertSasJoinScheduleLog($uid, $schedule_id, $is_join);
  /**
   * @param int $LessonId
   * @param int $scheduleId
   * @return bool
   */
  public function updateSasLesson($LessonId, $scheduleId);
  /**
   * @param int $scheduleId
   * @param int $teacherId
   * @return bool
   */
  public function updateSasLessonByTeacher($scheduleId, $teacherId);
  /**
   * @param int $LessonId
   * @param int $scheduleId
   * @return bool
   */
  public function updateSasLessonDel($LessonId, $scheduleId);
  /**
   * @param string $startTime
   * @param string $endTime
   * @return bool
   */
  public function updatePlanSasLessonShouldReportNum($startTime, $endTime);
  /**
   * @param int $LessonId
   * @param int $scheduleId
   * @return bool
   */
  public function updatePlanSasLessonEndClass($LessonId, $scheduleId);
  /**
   * @param string $startTime
   * @param string $endTime
   * @return bool
   */
  public function updatePlanSasLessonReport($startTime, $endTime);
  /**
   * @param int $scheduleId
   * @return bool
   */
  public function updateSasSchedule($scheduleId);
  /**
   * @param int $scheduleId
   * @return bool
   */
  public function updateSasScheduleUserNum($scheduleId);
  /**
   * @param int $scheduleId
   * @return bool
   */
  public function updatePlanSasScheduleUserNum($scheduleId);
  /**
   * @param int $scheduleId
   * @return bool
   */
  public function updatePlanSasScheduleAvgRateEndClass($scheduleId);
  /**
   * @param int $scheduleId
   * @return bool
   */
  public function updatePlanSasScheduleAvgRate($scheduleId);
  /**
   * @param int $scheduleId
   * @return bool
   */
  public function updatePlanSasScheduleOther($scheduleId);
  /**
   * @param int $scheduleId
   * @return bool
   */
  public function getSasScheduleTestNum($scheduleId);
  /**
   * @param int $scheduleId
   * @param int $lessonId
   * @return bool
   */
  public function insertPlanSasTeacherClassHourEndClass($scheduleId, $lessonId);
  /**
   * @param string $startTime
   * @param string $endTime
   * @return bool
   */
  public function insertPlanSasTeacherClassHour($startTime, $endTime);
  /**
   * @param int $lessonId
   * @return bool
   */
  public function updatePlanSasTeacherSummaryEndClass($lessonId);
  /**
   * @param string $startTime
   * @param string $endTime
   * @return bool
   */
  public function updatePlanSasTeacherSummary($startTime, $endTime);
  /**
   * @param string $startTime
   * @param string $endTime
   * @return bool
   */
  public function insertSasUserLesson($startTime, $endTime);
  /**
   * @param string $startTime
   * @param string $endTime
   * @return bool
   */
  public function deleteSasUserLesson($startTime, $endTime);
  /**
   * @param int $scheduleId
   * @param int $lessonId
   * @return bool
   */
  public function updatePlanSasUserLessonEndClass($scheduleId, $lessonId);
  /**
   * @param int $scheduleId
   * @param int $lessonId
   * @return bool
   */
  public function updatePlanSasUserLessonEndClass2($scheduleId, $lessonId);
  /**
   * @param int $scheduleId
   * @param int $lessonId
   * @return bool
   */
  public function updatePlanSasUserLessonReport($scheduleId, $lessonId);
  /**
   * @param int $uid
   * @param int $scheduleId
   * @return bool
   */
  public function updateSasUserScheduleJoin($uid, $scheduleId);
  /**
   * @param int $uid
   * @param int $scheduleId
   * @return bool
   */
  public function updateSasUserScheduleQuit($uid, $scheduleId);
  /**
   * @param int $scheduleId
   * @param int $type
   * @return bool
   */
  public function updatePlanSasUserScheduleReport($scheduleId, $type);
  /**
   * @param int $scheduleId
   * @return bool
   */
  public function updatePlanSasUserScheduleTest($scheduleId);
  /**
   * @param int $scheduleId
   * @return bool
   */
  public function updatePlanSasUserScheduleNoReportNum($scheduleId);
  /**
   * @param int $uid
   * @return bool
   */
  public function updateSasUserSummaryLesson($uid);
  /**
   * @param int $uid
   * @return bool
   */
  public function updateSasUserSummaryBuyGoods($uid);
  /**
   * @param int $uid
   * @param int $type
   * @return bool
   */
  public function updateSasUserSummaryUpGoods($uid, $type);
  /**
   * @param int $uid
   * @param int $type
   * @return bool
   */
  public function updateSasUserSummaryLearnStatus($uid, $type);
  /**
   * @param int $uid
   * @return bool
   */
  public function updateSasUserSummaryReport($uid);
  /**
   * @param int $LessonId
   * @param int $scheduleId
   * @param int $uid
   * @param int $type
   * @return bool
   */
  public function insertSasUserQuestionLog($LessonId, $scheduleId, $uid, $type);
  /**
   * @param int $LessonId
   * @return bool
   */
  public function updateQuestionSasLesson($LessonId);
  /**
   * @param int $scheduleId
   * @param int $uid
   * @return bool
   */
  public function updateQuestionSasUser($scheduleId, $uid);
  /**
   * @param int $uid
   * @return bool
   */
  public function updateSasUserSummaryOther($uid);
}


class SasUpdateClient implements \Services\SasUpdate\SasUpdateIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getSasLessonIdByEndTime($startTime, $endTime)
  {
    $this->send_getSasLessonIdByEndTime($startTime, $endTime);
    return $this->recv_getSasLessonIdByEndTime();
  }

  public function send_getSasLessonIdByEndTime($startTime, $endTime)
  {
    $args = new \Services\SasUpdate\SasUpdate_getSasLessonIdByEndTime_args();
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSasLessonIdByEndTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSasLessonIdByEndTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSasLessonIdByEndTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_getSasLessonIdByEndTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_getSasLessonIdByEndTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSasLessonIdByEndTime failed: unknown result");
  }

  public function getSasLessonIdByStartTime($startTime, $endTime)
  {
    $this->send_getSasLessonIdByStartTime($startTime, $endTime);
    return $this->recv_getSasLessonIdByStartTime();
  }

  public function send_getSasLessonIdByStartTime($startTime, $endTime)
  {
    $args = new \Services\SasUpdate\SasUpdate_getSasLessonIdByStartTime_args();
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSasLessonIdByStartTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSasLessonIdByStartTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSasLessonIdByStartTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_getSasLessonIdByStartTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_getSasLessonIdByStartTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSasLessonIdByStartTime failed: unknown result");
  }

  public function insertSasJoinScheduleLog($uid, $schedule_id, $is_join)
  {
    $this->send_insertSasJoinScheduleLog($uid, $schedule_id, $is_join);
    return $this->recv_insertSasJoinScheduleLog();
  }

  public function send_insertSasJoinScheduleLog($uid, $schedule_id, $is_join)
  {
    $args = new \Services\SasUpdate\SasUpdate_insertSasJoinScheduleLog_args();
    $args->uid = $uid;
    $args->schedule_id = $schedule_id;
    $args->is_join = $is_join;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertSasJoinScheduleLog', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertSasJoinScheduleLog', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertSasJoinScheduleLog()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_insertSasJoinScheduleLog_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_insertSasJoinScheduleLog_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertSasJoinScheduleLog failed: unknown result");
  }

  public function updateSasLesson($LessonId, $scheduleId)
  {
    $this->send_updateSasLesson($LessonId, $scheduleId);
    return $this->recv_updateSasLesson();
  }

  public function send_updateSasLesson($LessonId, $scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateSasLesson_args();
    $args->LessonId = $LessonId;
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSasLesson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSasLesson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSasLesson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateSasLesson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateSasLesson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSasLesson failed: unknown result");
  }

  public function updateSasLessonByTeacher($scheduleId, $teacherId)
  {
    $this->send_updateSasLessonByTeacher($scheduleId, $teacherId);
    return $this->recv_updateSasLessonByTeacher();
  }

  public function send_updateSasLessonByTeacher($scheduleId, $teacherId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateSasLessonByTeacher_args();
    $args->scheduleId = $scheduleId;
    $args->teacherId = $teacherId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSasLessonByTeacher', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSasLessonByTeacher', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSasLessonByTeacher()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateSasLessonByTeacher_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateSasLessonByTeacher_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSasLessonByTeacher failed: unknown result");
  }

  public function updateSasLessonDel($LessonId, $scheduleId)
  {
    $this->send_updateSasLessonDel($LessonId, $scheduleId);
    return $this->recv_updateSasLessonDel();
  }

  public function send_updateSasLessonDel($LessonId, $scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateSasLessonDel_args();
    $args->LessonId = $LessonId;
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSasLessonDel', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSasLessonDel', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSasLessonDel()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateSasLessonDel_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateSasLessonDel_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSasLessonDel failed: unknown result");
  }

  public function updatePlanSasLessonShouldReportNum($startTime, $endTime)
  {
    $this->send_updatePlanSasLessonShouldReportNum($startTime, $endTime);
    return $this->recv_updatePlanSasLessonShouldReportNum();
  }

  public function send_updatePlanSasLessonShouldReportNum($startTime, $endTime)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasLessonShouldReportNum_args();
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasLessonShouldReportNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasLessonShouldReportNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasLessonShouldReportNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasLessonShouldReportNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasLessonShouldReportNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasLessonShouldReportNum failed: unknown result");
  }

  public function updatePlanSasLessonEndClass($LessonId, $scheduleId)
  {
    $this->send_updatePlanSasLessonEndClass($LessonId, $scheduleId);
    return $this->recv_updatePlanSasLessonEndClass();
  }

  public function send_updatePlanSasLessonEndClass($LessonId, $scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasLessonEndClass_args();
    $args->LessonId = $LessonId;
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasLessonEndClass', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasLessonEndClass', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasLessonEndClass()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasLessonEndClass_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasLessonEndClass_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasLessonEndClass failed: unknown result");
  }

  public function updatePlanSasLessonReport($startTime, $endTime)
  {
    $this->send_updatePlanSasLessonReport($startTime, $endTime);
    return $this->recv_updatePlanSasLessonReport();
  }

  public function send_updatePlanSasLessonReport($startTime, $endTime)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasLessonReport_args();
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasLessonReport', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasLessonReport', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasLessonReport()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasLessonReport_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasLessonReport_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasLessonReport failed: unknown result");
  }

  public function updateSasSchedule($scheduleId)
  {
    $this->send_updateSasSchedule($scheduleId);
    return $this->recv_updateSasSchedule();
  }

  public function send_updateSasSchedule($scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateSasSchedule_args();
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSasSchedule', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSasSchedule', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSasSchedule()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateSasSchedule_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateSasSchedule_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSasSchedule failed: unknown result");
  }

  public function updateSasScheduleUserNum($scheduleId)
  {
    $this->send_updateSasScheduleUserNum($scheduleId);
    return $this->recv_updateSasScheduleUserNum();
  }

  public function send_updateSasScheduleUserNum($scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateSasScheduleUserNum_args();
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSasScheduleUserNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSasScheduleUserNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSasScheduleUserNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateSasScheduleUserNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateSasScheduleUserNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSasScheduleUserNum failed: unknown result");
  }

  public function updatePlanSasScheduleUserNum($scheduleId)
  {
    $this->send_updatePlanSasScheduleUserNum($scheduleId);
    return $this->recv_updatePlanSasScheduleUserNum();
  }

  public function send_updatePlanSasScheduleUserNum($scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleUserNum_args();
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasScheduleUserNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasScheduleUserNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasScheduleUserNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasScheduleUserNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleUserNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasScheduleUserNum failed: unknown result");
  }

  public function updatePlanSasScheduleAvgRateEndClass($scheduleId)
  {
    $this->send_updatePlanSasScheduleAvgRateEndClass($scheduleId);
    return $this->recv_updatePlanSasScheduleAvgRateEndClass();
  }

  public function send_updatePlanSasScheduleAvgRateEndClass($scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleAvgRateEndClass_args();
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasScheduleAvgRateEndClass', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasScheduleAvgRateEndClass', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasScheduleAvgRateEndClass()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasScheduleAvgRateEndClass_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleAvgRateEndClass_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasScheduleAvgRateEndClass failed: unknown result");
  }

  public function updatePlanSasScheduleAvgRate($scheduleId)
  {
    $this->send_updatePlanSasScheduleAvgRate($scheduleId);
    return $this->recv_updatePlanSasScheduleAvgRate();
  }

  public function send_updatePlanSasScheduleAvgRate($scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleAvgRate_args();
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasScheduleAvgRate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasScheduleAvgRate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasScheduleAvgRate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasScheduleAvgRate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleAvgRate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasScheduleAvgRate failed: unknown result");
  }

  public function updatePlanSasScheduleOther($scheduleId)
  {
    $this->send_updatePlanSasScheduleOther($scheduleId);
    return $this->recv_updatePlanSasScheduleOther();
  }

  public function send_updatePlanSasScheduleOther($scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleOther_args();
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasScheduleOther', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasScheduleOther', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasScheduleOther()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasScheduleOther_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleOther_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasScheduleOther failed: unknown result");
  }

  public function getSasScheduleTestNum($scheduleId)
  {
    $this->send_getSasScheduleTestNum($scheduleId);
    return $this->recv_getSasScheduleTestNum();
  }

  public function send_getSasScheduleTestNum($scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_getSasScheduleTestNum_args();
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSasScheduleTestNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSasScheduleTestNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSasScheduleTestNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_getSasScheduleTestNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_getSasScheduleTestNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSasScheduleTestNum failed: unknown result");
  }

  public function insertPlanSasTeacherClassHourEndClass($scheduleId, $lessonId)
  {
    $this->send_insertPlanSasTeacherClassHourEndClass($scheduleId, $lessonId);
    return $this->recv_insertPlanSasTeacherClassHourEndClass();
  }

  public function send_insertPlanSasTeacherClassHourEndClass($scheduleId, $lessonId)
  {
    $args = new \Services\SasUpdate\SasUpdate_insertPlanSasTeacherClassHourEndClass_args();
    $args->scheduleId = $scheduleId;
    $args->lessonId = $lessonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertPlanSasTeacherClassHourEndClass', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertPlanSasTeacherClassHourEndClass', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertPlanSasTeacherClassHourEndClass()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_insertPlanSasTeacherClassHourEndClass_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_insertPlanSasTeacherClassHourEndClass_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertPlanSasTeacherClassHourEndClass failed: unknown result");
  }

  public function insertPlanSasTeacherClassHour($startTime, $endTime)
  {
    $this->send_insertPlanSasTeacherClassHour($startTime, $endTime);
    return $this->recv_insertPlanSasTeacherClassHour();
  }

  public function send_insertPlanSasTeacherClassHour($startTime, $endTime)
  {
    $args = new \Services\SasUpdate\SasUpdate_insertPlanSasTeacherClassHour_args();
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertPlanSasTeacherClassHour', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertPlanSasTeacherClassHour', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertPlanSasTeacherClassHour()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_insertPlanSasTeacherClassHour_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_insertPlanSasTeacherClassHour_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertPlanSasTeacherClassHour failed: unknown result");
  }

  public function updatePlanSasTeacherSummaryEndClass($lessonId)
  {
    $this->send_updatePlanSasTeacherSummaryEndClass($lessonId);
    return $this->recv_updatePlanSasTeacherSummaryEndClass();
  }

  public function send_updatePlanSasTeacherSummaryEndClass($lessonId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasTeacherSummaryEndClass_args();
    $args->lessonId = $lessonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasTeacherSummaryEndClass', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasTeacherSummaryEndClass', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasTeacherSummaryEndClass()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasTeacherSummaryEndClass_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasTeacherSummaryEndClass_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasTeacherSummaryEndClass failed: unknown result");
  }

  public function updatePlanSasTeacherSummary($startTime, $endTime)
  {
    $this->send_updatePlanSasTeacherSummary($startTime, $endTime);
    return $this->recv_updatePlanSasTeacherSummary();
  }

  public function send_updatePlanSasTeacherSummary($startTime, $endTime)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasTeacherSummary_args();
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasTeacherSummary', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasTeacherSummary', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasTeacherSummary()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasTeacherSummary_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasTeacherSummary_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasTeacherSummary failed: unknown result");
  }

  public function insertSasUserLesson($startTime, $endTime)
  {
    $this->send_insertSasUserLesson($startTime, $endTime);
    return $this->recv_insertSasUserLesson();
  }

  public function send_insertSasUserLesson($startTime, $endTime)
  {
    $args = new \Services\SasUpdate\SasUpdate_insertSasUserLesson_args();
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertSasUserLesson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertSasUserLesson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertSasUserLesson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_insertSasUserLesson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_insertSasUserLesson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertSasUserLesson failed: unknown result");
  }

  public function deleteSasUserLesson($startTime, $endTime)
  {
    $this->send_deleteSasUserLesson($startTime, $endTime);
    return $this->recv_deleteSasUserLesson();
  }

  public function send_deleteSasUserLesson($startTime, $endTime)
  {
    $args = new \Services\SasUpdate\SasUpdate_deleteSasUserLesson_args();
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteSasUserLesson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteSasUserLesson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteSasUserLesson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_deleteSasUserLesson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_deleteSasUserLesson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteSasUserLesson failed: unknown result");
  }

  public function updatePlanSasUserLessonEndClass($scheduleId, $lessonId)
  {
    $this->send_updatePlanSasUserLessonEndClass($scheduleId, $lessonId);
    return $this->recv_updatePlanSasUserLessonEndClass();
  }

  public function send_updatePlanSasUserLessonEndClass($scheduleId, $lessonId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasUserLessonEndClass_args();
    $args->scheduleId = $scheduleId;
    $args->lessonId = $lessonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasUserLessonEndClass', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasUserLessonEndClass', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasUserLessonEndClass()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasUserLessonEndClass_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasUserLessonEndClass_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasUserLessonEndClass failed: unknown result");
  }

  public function updatePlanSasUserLessonEndClass2($scheduleId, $lessonId)
  {
    $this->send_updatePlanSasUserLessonEndClass2($scheduleId, $lessonId);
    return $this->recv_updatePlanSasUserLessonEndClass2();
  }

  public function send_updatePlanSasUserLessonEndClass2($scheduleId, $lessonId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasUserLessonEndClass2_args();
    $args->scheduleId = $scheduleId;
    $args->lessonId = $lessonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasUserLessonEndClass2', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasUserLessonEndClass2', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasUserLessonEndClass2()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasUserLessonEndClass2_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasUserLessonEndClass2_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasUserLessonEndClass2 failed: unknown result");
  }

  public function updatePlanSasUserLessonReport($scheduleId, $lessonId)
  {
    $this->send_updatePlanSasUserLessonReport($scheduleId, $lessonId);
    return $this->recv_updatePlanSasUserLessonReport();
  }

  public function send_updatePlanSasUserLessonReport($scheduleId, $lessonId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasUserLessonReport_args();
    $args->scheduleId = $scheduleId;
    $args->lessonId = $lessonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasUserLessonReport', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasUserLessonReport', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasUserLessonReport()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasUserLessonReport_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasUserLessonReport_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasUserLessonReport failed: unknown result");
  }

  public function updateSasUserScheduleJoin($uid, $scheduleId)
  {
    $this->send_updateSasUserScheduleJoin($uid, $scheduleId);
    return $this->recv_updateSasUserScheduleJoin();
  }

  public function send_updateSasUserScheduleJoin($uid, $scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateSasUserScheduleJoin_args();
    $args->uid = $uid;
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSasUserScheduleJoin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSasUserScheduleJoin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSasUserScheduleJoin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateSasUserScheduleJoin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateSasUserScheduleJoin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSasUserScheduleJoin failed: unknown result");
  }

  public function updateSasUserScheduleQuit($uid, $scheduleId)
  {
    $this->send_updateSasUserScheduleQuit($uid, $scheduleId);
    return $this->recv_updateSasUserScheduleQuit();
  }

  public function send_updateSasUserScheduleQuit($uid, $scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateSasUserScheduleQuit_args();
    $args->uid = $uid;
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSasUserScheduleQuit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSasUserScheduleQuit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSasUserScheduleQuit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateSasUserScheduleQuit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateSasUserScheduleQuit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSasUserScheduleQuit failed: unknown result");
  }

  public function updatePlanSasUserScheduleReport($scheduleId, $type)
  {
    $this->send_updatePlanSasUserScheduleReport($scheduleId, $type);
    return $this->recv_updatePlanSasUserScheduleReport();
  }

  public function send_updatePlanSasUserScheduleReport($scheduleId, $type)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleReport_args();
    $args->scheduleId = $scheduleId;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasUserScheduleReport', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasUserScheduleReport', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasUserScheduleReport()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleReport_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleReport_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasUserScheduleReport failed: unknown result");
  }

  public function updatePlanSasUserScheduleTest($scheduleId)
  {
    $this->send_updatePlanSasUserScheduleTest($scheduleId);
    return $this->recv_updatePlanSasUserScheduleTest();
  }

  public function send_updatePlanSasUserScheduleTest($scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleTest_args();
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasUserScheduleTest', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasUserScheduleTest', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasUserScheduleTest()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleTest_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleTest_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasUserScheduleTest failed: unknown result");
  }

  public function updatePlanSasUserScheduleNoReportNum($scheduleId)
  {
    $this->send_updatePlanSasUserScheduleNoReportNum($scheduleId);
    return $this->recv_updatePlanSasUserScheduleNoReportNum();
  }

  public function send_updatePlanSasUserScheduleNoReportNum($scheduleId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleNoReportNum_args();
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlanSasUserScheduleNoReportNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlanSasUserScheduleNoReportNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlanSasUserScheduleNoReportNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleNoReportNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleNoReportNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlanSasUserScheduleNoReportNum failed: unknown result");
  }

  public function updateSasUserSummaryLesson($uid)
  {
    $this->send_updateSasUserSummaryLesson($uid);
    return $this->recv_updateSasUserSummaryLesson();
  }

  public function send_updateSasUserSummaryLesson($uid)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryLesson_args();
    $args->uid = $uid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSasUserSummaryLesson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSasUserSummaryLesson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSasUserSummaryLesson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateSasUserSummaryLesson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryLesson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSasUserSummaryLesson failed: unknown result");
  }

  public function updateSasUserSummaryBuyGoods($uid)
  {
    $this->send_updateSasUserSummaryBuyGoods($uid);
    return $this->recv_updateSasUserSummaryBuyGoods();
  }

  public function send_updateSasUserSummaryBuyGoods($uid)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryBuyGoods_args();
    $args->uid = $uid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSasUserSummaryBuyGoods', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSasUserSummaryBuyGoods', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSasUserSummaryBuyGoods()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateSasUserSummaryBuyGoods_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryBuyGoods_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSasUserSummaryBuyGoods failed: unknown result");
  }

  public function updateSasUserSummaryUpGoods($uid, $type)
  {
    $this->send_updateSasUserSummaryUpGoods($uid, $type);
    return $this->recv_updateSasUserSummaryUpGoods();
  }

  public function send_updateSasUserSummaryUpGoods($uid, $type)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryUpGoods_args();
    $args->uid = $uid;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSasUserSummaryUpGoods', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSasUserSummaryUpGoods', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSasUserSummaryUpGoods()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateSasUserSummaryUpGoods_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryUpGoods_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSasUserSummaryUpGoods failed: unknown result");
  }

  public function updateSasUserSummaryLearnStatus($uid, $type)
  {
    $this->send_updateSasUserSummaryLearnStatus($uid, $type);
    return $this->recv_updateSasUserSummaryLearnStatus();
  }

  public function send_updateSasUserSummaryLearnStatus($uid, $type)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryLearnStatus_args();
    $args->uid = $uid;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSasUserSummaryLearnStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSasUserSummaryLearnStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSasUserSummaryLearnStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateSasUserSummaryLearnStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryLearnStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSasUserSummaryLearnStatus failed: unknown result");
  }

  public function updateSasUserSummaryReport($uid)
  {
    $this->send_updateSasUserSummaryReport($uid);
    return $this->recv_updateSasUserSummaryReport();
  }

  public function send_updateSasUserSummaryReport($uid)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryReport_args();
    $args->uid = $uid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSasUserSummaryReport', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSasUserSummaryReport', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSasUserSummaryReport()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateSasUserSummaryReport_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryReport_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSasUserSummaryReport failed: unknown result");
  }

  public function insertSasUserQuestionLog($LessonId, $scheduleId, $uid, $type)
  {
    $this->send_insertSasUserQuestionLog($LessonId, $scheduleId, $uid, $type);
    return $this->recv_insertSasUserQuestionLog();
  }

  public function send_insertSasUserQuestionLog($LessonId, $scheduleId, $uid, $type)
  {
    $args = new \Services\SasUpdate\SasUpdate_insertSasUserQuestionLog_args();
    $args->LessonId = $LessonId;
    $args->scheduleId = $scheduleId;
    $args->uid = $uid;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertSasUserQuestionLog', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertSasUserQuestionLog', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertSasUserQuestionLog()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_insertSasUserQuestionLog_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_insertSasUserQuestionLog_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertSasUserQuestionLog failed: unknown result");
  }

  public function updateQuestionSasLesson($LessonId)
  {
    $this->send_updateQuestionSasLesson($LessonId);
    return $this->recv_updateQuestionSasLesson();
  }

  public function send_updateQuestionSasLesson($LessonId)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateQuestionSasLesson_args();
    $args->LessonId = $LessonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateQuestionSasLesson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateQuestionSasLesson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateQuestionSasLesson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateQuestionSasLesson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateQuestionSasLesson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateQuestionSasLesson failed: unknown result");
  }

  public function updateQuestionSasUser($scheduleId, $uid)
  {
    $this->send_updateQuestionSasUser($scheduleId, $uid);
    return $this->recv_updateQuestionSasUser();
  }

  public function send_updateQuestionSasUser($scheduleId, $uid)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateQuestionSasUser_args();
    $args->scheduleId = $scheduleId;
    $args->uid = $uid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateQuestionSasUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateQuestionSasUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateQuestionSasUser()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateQuestionSasUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateQuestionSasUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateQuestionSasUser failed: unknown result");
  }

  public function updateSasUserSummaryOther($uid)
  {
    $this->send_updateSasUserSummaryOther($uid);
    return $this->recv_updateSasUserSummaryOther();
  }

  public function send_updateSasUserSummaryOther($uid)
  {
    $args = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryOther_args();
    $args->uid = $uid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSasUserSummaryOther', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSasUserSummaryOther', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSasUserSummaryOther()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\SasUpdate\SasUpdate_updateSasUserSummaryOther_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryOther_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSasUserSummaryOther failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class SasUpdate_getSasLessonIdByEndTime_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'startTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'endTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_getSasLessonIdByEndTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_getSasLessonIdByEndTime_args');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 1);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 2);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_getSasLessonIdByEndTime_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_getSasLessonIdByEndTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = array();
              $_size6 = 0;
              $_ktype7 = 0;
              $_vtype8 = 0;
              $xfer += $input->readMapBegin($_ktype7, $_vtype8, $_size6);
              for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
              {
                $key11 = '';
                $val12 = '';
                $xfer += $input->readString($key11);
                $xfer += $input->readString($val12);
                $elem5[$key11] = $val12;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_getSasLessonIdByEndTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter13)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter13));
              {
                foreach ($iter13 as $kiter14 => $viter15)
                {
                  $xfer += $output->writeString($kiter14);
                  $xfer += $output->writeString($viter15);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_getSasLessonIdByStartTime_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'startTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'endTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_getSasLessonIdByStartTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_getSasLessonIdByStartTime_args');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 1);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 2);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_getSasLessonIdByStartTime_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_getSasLessonIdByStartTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $elem21 = array();
              $_size22 = 0;
              $_ktype23 = 0;
              $_vtype24 = 0;
              $xfer += $input->readMapBegin($_ktype23, $_vtype24, $_size22);
              for ($_i26 = 0; $_i26 < $_size22; ++$_i26)
              {
                $key27 = '';
                $val28 = '';
                $xfer += $input->readString($key27);
                $xfer += $input->readString($val28);
                $elem21[$key27] = $val28;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_getSasLessonIdByStartTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter29)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter29));
              {
                foreach ($iter29 as $kiter30 => $viter31)
                {
                  $xfer += $output->writeString($kiter30);
                  $xfer += $output->writeString($viter31);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_insertSasJoinScheduleLog_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'schedule_id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'is_join',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $schedule_id = null;
  /**
   * @var int
   */
  public $is_join = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['schedule_id'])) {
        $this->schedule_id = $vals['schedule_id'];
      }
      if (isset($vals['is_join'])) {
        $this->is_join = $vals['is_join'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_insertSasJoinScheduleLog_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->schedule_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_join);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_insertSasJoinScheduleLog_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->schedule_id !== null) {
      $xfer += $output->writeFieldBegin('schedule_id', TType::I32, 2);
      $xfer += $output->writeI32($this->schedule_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_join !== null) {
      $xfer += $output->writeFieldBegin('is_join', TType::I32, 3);
      $xfer += $output->writeI32($this->is_join);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_insertSasJoinScheduleLog_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_insertSasJoinScheduleLog_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_insertSasJoinScheduleLog_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasLesson_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'LessonId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $LessonId = null;
  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['LessonId'])) {
        $this->LessonId = $vals['LessonId'];
      }
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasLesson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->LessonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasLesson_args');
    if ($this->LessonId !== null) {
      $xfer += $output->writeFieldBegin('LessonId', TType::I32, 1);
      $xfer += $output->writeI32($this->LessonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 2);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasLesson_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasLesson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasLesson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasLessonByTeacher_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'teacherId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var int
   */
  public $teacherId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['teacherId'])) {
        $this->teacherId = $vals['teacherId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasLessonByTeacher_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->teacherId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasLessonByTeacher_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->teacherId !== null) {
      $xfer += $output->writeFieldBegin('teacherId', TType::I32, 2);
      $xfer += $output->writeI32($this->teacherId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasLessonByTeacher_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasLessonByTeacher_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasLessonByTeacher_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasLessonDel_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'LessonId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $LessonId = null;
  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['LessonId'])) {
        $this->LessonId = $vals['LessonId'];
      }
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasLessonDel_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->LessonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasLessonDel_args');
    if ($this->LessonId !== null) {
      $xfer += $output->writeFieldBegin('LessonId', TType::I32, 1);
      $xfer += $output->writeI32($this->LessonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 2);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasLessonDel_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasLessonDel_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasLessonDel_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasLessonShouldReportNum_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'startTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'endTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasLessonShouldReportNum_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasLessonShouldReportNum_args');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 1);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 2);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasLessonShouldReportNum_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasLessonShouldReportNum_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasLessonShouldReportNum_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasLessonEndClass_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'LessonId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $LessonId = null;
  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['LessonId'])) {
        $this->LessonId = $vals['LessonId'];
      }
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasLessonEndClass_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->LessonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasLessonEndClass_args');
    if ($this->LessonId !== null) {
      $xfer += $output->writeFieldBegin('LessonId', TType::I32, 1);
      $xfer += $output->writeI32($this->LessonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 2);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasLessonEndClass_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasLessonEndClass_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasLessonEndClass_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasLessonReport_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'startTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'endTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasLessonReport_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasLessonReport_args');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 1);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 2);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasLessonReport_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasLessonReport_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasLessonReport_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasSchedule_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasSchedule_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasSchedule_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasSchedule_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasSchedule_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasSchedule_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasScheduleUserNum_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasScheduleUserNum_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasScheduleUserNum_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasScheduleUserNum_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasScheduleUserNum_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasScheduleUserNum_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasScheduleUserNum_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasScheduleUserNum_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasScheduleUserNum_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasScheduleUserNum_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasScheduleUserNum_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasScheduleUserNum_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasScheduleAvgRateEndClass_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasScheduleAvgRateEndClass_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasScheduleAvgRateEndClass_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasScheduleAvgRateEndClass_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasScheduleAvgRateEndClass_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasScheduleAvgRateEndClass_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasScheduleAvgRate_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasScheduleAvgRate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasScheduleAvgRate_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasScheduleAvgRate_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasScheduleAvgRate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasScheduleAvgRate_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasScheduleOther_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasScheduleOther_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasScheduleOther_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasScheduleOther_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasScheduleOther_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasScheduleOther_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_getSasScheduleTestNum_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_getSasScheduleTestNum_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_getSasScheduleTestNum_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_getSasScheduleTestNum_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_getSasScheduleTestNum_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_getSasScheduleTestNum_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_insertPlanSasTeacherClassHourEndClass_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'lessonId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var int
   */
  public $lessonId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['lessonId'])) {
        $this->lessonId = $vals['lessonId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_insertPlanSasTeacherClassHourEndClass_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lessonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_insertPlanSasTeacherClassHourEndClass_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lessonId !== null) {
      $xfer += $output->writeFieldBegin('lessonId', TType::I32, 2);
      $xfer += $output->writeI32($this->lessonId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_insertPlanSasTeacherClassHourEndClass_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_insertPlanSasTeacherClassHourEndClass_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_insertPlanSasTeacherClassHourEndClass_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_insertPlanSasTeacherClassHour_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'startTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'endTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_insertPlanSasTeacherClassHour_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_insertPlanSasTeacherClassHour_args');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 1);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 2);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_insertPlanSasTeacherClassHour_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_insertPlanSasTeacherClassHour_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_insertPlanSasTeacherClassHour_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasTeacherSummaryEndClass_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'lessonId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $lessonId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['lessonId'])) {
        $this->lessonId = $vals['lessonId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasTeacherSummaryEndClass_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lessonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasTeacherSummaryEndClass_args');
    if ($this->lessonId !== null) {
      $xfer += $output->writeFieldBegin('lessonId', TType::I32, 1);
      $xfer += $output->writeI32($this->lessonId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasTeacherSummaryEndClass_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasTeacherSummaryEndClass_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasTeacherSummaryEndClass_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasTeacherSummary_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'startTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'endTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasTeacherSummary_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasTeacherSummary_args');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 1);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 2);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasTeacherSummary_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasTeacherSummary_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasTeacherSummary_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_insertSasUserLesson_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'startTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'endTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_insertSasUserLesson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_insertSasUserLesson_args');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 1);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 2);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_insertSasUserLesson_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_insertSasUserLesson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_insertSasUserLesson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_deleteSasUserLesson_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'startTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'endTime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_deleteSasUserLesson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_deleteSasUserLesson_args');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 1);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 2);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_deleteSasUserLesson_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_deleteSasUserLesson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_deleteSasUserLesson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasUserLessonEndClass_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'lessonId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var int
   */
  public $lessonId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['lessonId'])) {
        $this->lessonId = $vals['lessonId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasUserLessonEndClass_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lessonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasUserLessonEndClass_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lessonId !== null) {
      $xfer += $output->writeFieldBegin('lessonId', TType::I32, 2);
      $xfer += $output->writeI32($this->lessonId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasUserLessonEndClass_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasUserLessonEndClass_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasUserLessonEndClass_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasUserLessonEndClass2_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'lessonId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var int
   */
  public $lessonId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['lessonId'])) {
        $this->lessonId = $vals['lessonId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasUserLessonEndClass2_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lessonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasUserLessonEndClass2_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lessonId !== null) {
      $xfer += $output->writeFieldBegin('lessonId', TType::I32, 2);
      $xfer += $output->writeI32($this->lessonId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasUserLessonEndClass2_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasUserLessonEndClass2_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasUserLessonEndClass2_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasUserLessonReport_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'lessonId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var int
   */
  public $lessonId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['lessonId'])) {
        $this->lessonId = $vals['lessonId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasUserLessonReport_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lessonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasUserLessonReport_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lessonId !== null) {
      $xfer += $output->writeFieldBegin('lessonId', TType::I32, 2);
      $xfer += $output->writeI32($this->lessonId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasUserLessonReport_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasUserLessonReport_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasUserLessonReport_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserScheduleJoin_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserScheduleJoin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserScheduleJoin_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 2);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserScheduleJoin_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserScheduleJoin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserScheduleJoin_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserScheduleQuit_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserScheduleQuit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserScheduleQuit_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 2);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserScheduleQuit_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserScheduleQuit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserScheduleQuit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasUserScheduleReport_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var int
   */
  public $type = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasUserScheduleReport_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasUserScheduleReport_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasUserScheduleReport_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasUserScheduleReport_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasUserScheduleReport_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasUserScheduleTest_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasUserScheduleTest_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasUserScheduleTest_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasUserScheduleTest_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasUserScheduleTest_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasUserScheduleTest_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasUserScheduleNoReportNum_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasUserScheduleNoReportNum_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasUserScheduleNoReportNum_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updatePlanSasUserScheduleNoReportNum_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updatePlanSasUserScheduleNoReportNum_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updatePlanSasUserScheduleNoReportNum_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserSummaryLesson_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserSummaryLesson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserSummaryLesson_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserSummaryLesson_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserSummaryLesson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserSummaryLesson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserSummaryBuyGoods_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserSummaryBuyGoods_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserSummaryBuyGoods_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserSummaryBuyGoods_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserSummaryBuyGoods_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserSummaryBuyGoods_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserSummaryUpGoods_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $type = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserSummaryUpGoods_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserSummaryUpGoods_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserSummaryUpGoods_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserSummaryUpGoods_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserSummaryUpGoods_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserSummaryLearnStatus_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $type = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserSummaryLearnStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserSummaryLearnStatus_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserSummaryLearnStatus_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserSummaryLearnStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserSummaryLearnStatus_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserSummaryReport_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserSummaryReport_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserSummaryReport_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserSummaryReport_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserSummaryReport_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserSummaryReport_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_insertSasUserQuestionLog_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'LessonId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $LessonId = null;
  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $type = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['LessonId'])) {
        $this->LessonId = $vals['LessonId'];
      }
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_insertSasUserQuestionLog_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->LessonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_insertSasUserQuestionLog_args');
    if ($this->LessonId !== null) {
      $xfer += $output->writeFieldBegin('LessonId', TType::I32, 1);
      $xfer += $output->writeI32($this->LessonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 2);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 3);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 4);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_insertSasUserQuestionLog_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_insertSasUserQuestionLog_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_insertSasUserQuestionLog_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateQuestionSasLesson_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'LessonId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $LessonId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['LessonId'])) {
        $this->LessonId = $vals['LessonId'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateQuestionSasLesson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->LessonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateQuestionSasLesson_args');
    if ($this->LessonId !== null) {
      $xfer += $output->writeFieldBegin('LessonId', TType::I32, 1);
      $xfer += $output->writeI32($this->LessonId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateQuestionSasLesson_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateQuestionSasLesson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateQuestionSasLesson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateQuestionSasUser_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var int
   */
  public $uid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateQuestionSasUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateQuestionSasUser_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateQuestionSasUser_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateQuestionSasUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateQuestionSasUser_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserSummaryOther_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserSummaryOther_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserSummaryOther_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdate_updateSasUserSummaryOther_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SasUpdate_updateSasUserSummaryOther_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SasUpdate_updateSasUserSummaryOther_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SasUpdateProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_getSasLessonIdByEndTime($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_getSasLessonIdByEndTime_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_getSasLessonIdByEndTime_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_getSasLessonIdByEndTime_result();
    $result->success = $this->handler_->getSasLessonIdByEndTime($args->startTime, $args->endTime);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSasLessonIdByEndTime', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSasLessonIdByEndTime', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getSasLessonIdByStartTime($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_getSasLessonIdByStartTime_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_getSasLessonIdByStartTime_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_getSasLessonIdByStartTime_result();
    $result->success = $this->handler_->getSasLessonIdByStartTime($args->startTime, $args->endTime);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSasLessonIdByStartTime', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSasLessonIdByStartTime', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_insertSasJoinScheduleLog($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_insertSasJoinScheduleLog_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_insertSasJoinScheduleLog_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_insertSasJoinScheduleLog_result();
    $result->success = $this->handler_->insertSasJoinScheduleLog($args->uid, $args->schedule_id, $args->is_join);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'insertSasJoinScheduleLog', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('insertSasJoinScheduleLog', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateSasLesson($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateSasLesson_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateSasLesson_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateSasLesson_result();
    $result->success = $this->handler_->updateSasLesson($args->LessonId, $args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateSasLesson', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateSasLesson', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateSasLessonByTeacher($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateSasLessonByTeacher_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateSasLessonByTeacher_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateSasLessonByTeacher_result();
    $result->success = $this->handler_->updateSasLessonByTeacher($args->scheduleId, $args->teacherId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateSasLessonByTeacher', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateSasLessonByTeacher', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateSasLessonDel($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateSasLessonDel_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateSasLessonDel_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateSasLessonDel_result();
    $result->success = $this->handler_->updateSasLessonDel($args->LessonId, $args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateSasLessonDel', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateSasLessonDel', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasLessonShouldReportNum($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasLessonShouldReportNum_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasLessonShouldReportNum_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasLessonShouldReportNum_result();
    $result->success = $this->handler_->updatePlanSasLessonShouldReportNum($args->startTime, $args->endTime);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasLessonShouldReportNum', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasLessonShouldReportNum', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasLessonEndClass($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasLessonEndClass_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasLessonEndClass_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasLessonEndClass_result();
    $result->success = $this->handler_->updatePlanSasLessonEndClass($args->LessonId, $args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasLessonEndClass', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasLessonEndClass', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasLessonReport($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasLessonReport_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasLessonReport_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasLessonReport_result();
    $result->success = $this->handler_->updatePlanSasLessonReport($args->startTime, $args->endTime);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasLessonReport', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasLessonReport', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateSasSchedule($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateSasSchedule_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateSasSchedule_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateSasSchedule_result();
    $result->success = $this->handler_->updateSasSchedule($args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateSasSchedule', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateSasSchedule', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateSasScheduleUserNum($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateSasScheduleUserNum_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateSasScheduleUserNum_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateSasScheduleUserNum_result();
    $result->success = $this->handler_->updateSasScheduleUserNum($args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateSasScheduleUserNum', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateSasScheduleUserNum', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasScheduleUserNum($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasScheduleUserNum_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleUserNum_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleUserNum_result();
    $result->success = $this->handler_->updatePlanSasScheduleUserNum($args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasScheduleUserNum', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasScheduleUserNum', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasScheduleAvgRateEndClass($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasScheduleAvgRateEndClass_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleAvgRateEndClass_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleAvgRateEndClass_result();
    $result->success = $this->handler_->updatePlanSasScheduleAvgRateEndClass($args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasScheduleAvgRateEndClass', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasScheduleAvgRateEndClass', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasScheduleAvgRate($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasScheduleAvgRate_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleAvgRate_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleAvgRate_result();
    $result->success = $this->handler_->updatePlanSasScheduleAvgRate($args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasScheduleAvgRate', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasScheduleAvgRate', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasScheduleOther($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasScheduleOther_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleOther_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasScheduleOther_result();
    $result->success = $this->handler_->updatePlanSasScheduleOther($args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasScheduleOther', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasScheduleOther', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getSasScheduleTestNum($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_getSasScheduleTestNum_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_getSasScheduleTestNum_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_getSasScheduleTestNum_result();
    $result->success = $this->handler_->getSasScheduleTestNum($args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSasScheduleTestNum', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSasScheduleTestNum', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_insertPlanSasTeacherClassHourEndClass($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_insertPlanSasTeacherClassHourEndClass_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_insertPlanSasTeacherClassHourEndClass_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_insertPlanSasTeacherClassHourEndClass_result();
    $result->success = $this->handler_->insertPlanSasTeacherClassHourEndClass($args->scheduleId, $args->lessonId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'insertPlanSasTeacherClassHourEndClass', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('insertPlanSasTeacherClassHourEndClass', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_insertPlanSasTeacherClassHour($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_insertPlanSasTeacherClassHour_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_insertPlanSasTeacherClassHour_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_insertPlanSasTeacherClassHour_result();
    $result->success = $this->handler_->insertPlanSasTeacherClassHour($args->startTime, $args->endTime);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'insertPlanSasTeacherClassHour', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('insertPlanSasTeacherClassHour', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasTeacherSummaryEndClass($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasTeacherSummaryEndClass_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasTeacherSummaryEndClass_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasTeacherSummaryEndClass_result();
    $result->success = $this->handler_->updatePlanSasTeacherSummaryEndClass($args->lessonId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasTeacherSummaryEndClass', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasTeacherSummaryEndClass', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasTeacherSummary($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasTeacherSummary_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasTeacherSummary_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasTeacherSummary_result();
    $result->success = $this->handler_->updatePlanSasTeacherSummary($args->startTime, $args->endTime);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasTeacherSummary', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasTeacherSummary', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_insertSasUserLesson($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_insertSasUserLesson_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_insertSasUserLesson_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_insertSasUserLesson_result();
    $result->success = $this->handler_->insertSasUserLesson($args->startTime, $args->endTime);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'insertSasUserLesson', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('insertSasUserLesson', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_deleteSasUserLesson($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_deleteSasUserLesson_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_deleteSasUserLesson_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_deleteSasUserLesson_result();
    $result->success = $this->handler_->deleteSasUserLesson($args->startTime, $args->endTime);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'deleteSasUserLesson', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('deleteSasUserLesson', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasUserLessonEndClass($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasUserLessonEndClass_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasUserLessonEndClass_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasUserLessonEndClass_result();
    $result->success = $this->handler_->updatePlanSasUserLessonEndClass($args->scheduleId, $args->lessonId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasUserLessonEndClass', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasUserLessonEndClass', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasUserLessonEndClass2($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasUserLessonEndClass2_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasUserLessonEndClass2_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasUserLessonEndClass2_result();
    $result->success = $this->handler_->updatePlanSasUserLessonEndClass2($args->scheduleId, $args->lessonId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasUserLessonEndClass2', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasUserLessonEndClass2', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasUserLessonReport($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasUserLessonReport_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasUserLessonReport_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasUserLessonReport_result();
    $result->success = $this->handler_->updatePlanSasUserLessonReport($args->scheduleId, $args->lessonId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasUserLessonReport', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasUserLessonReport', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateSasUserScheduleJoin($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateSasUserScheduleJoin_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateSasUserScheduleJoin_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateSasUserScheduleJoin_result();
    $result->success = $this->handler_->updateSasUserScheduleJoin($args->uid, $args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateSasUserScheduleJoin', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateSasUserScheduleJoin', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateSasUserScheduleQuit($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateSasUserScheduleQuit_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateSasUserScheduleQuit_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateSasUserScheduleQuit_result();
    $result->success = $this->handler_->updateSasUserScheduleQuit($args->uid, $args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateSasUserScheduleQuit', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateSasUserScheduleQuit', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasUserScheduleReport($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleReport_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleReport_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleReport_result();
    $result->success = $this->handler_->updatePlanSasUserScheduleReport($args->scheduleId, $args->type);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasUserScheduleReport', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasUserScheduleReport', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasUserScheduleTest($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleTest_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleTest_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleTest_result();
    $result->success = $this->handler_->updatePlanSasUserScheduleTest($args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasUserScheduleTest', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasUserScheduleTest', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePlanSasUserScheduleNoReportNum($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleNoReportNum_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleNoReportNum_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updatePlanSasUserScheduleNoReportNum_result();
    $result->success = $this->handler_->updatePlanSasUserScheduleNoReportNum($args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePlanSasUserScheduleNoReportNum', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePlanSasUserScheduleNoReportNum', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateSasUserSummaryLesson($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateSasUserSummaryLesson_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryLesson_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryLesson_result();
    $result->success = $this->handler_->updateSasUserSummaryLesson($args->uid);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateSasUserSummaryLesson', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateSasUserSummaryLesson', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateSasUserSummaryBuyGoods($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateSasUserSummaryBuyGoods_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryBuyGoods_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryBuyGoods_result();
    $result->success = $this->handler_->updateSasUserSummaryBuyGoods($args->uid);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateSasUserSummaryBuyGoods', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateSasUserSummaryBuyGoods', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateSasUserSummaryUpGoods($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateSasUserSummaryUpGoods_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryUpGoods_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryUpGoods_result();
    $result->success = $this->handler_->updateSasUserSummaryUpGoods($args->uid, $args->type);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateSasUserSummaryUpGoods', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateSasUserSummaryUpGoods', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateSasUserSummaryLearnStatus($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateSasUserSummaryLearnStatus_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryLearnStatus_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryLearnStatus_result();
    $result->success = $this->handler_->updateSasUserSummaryLearnStatus($args->uid, $args->type);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateSasUserSummaryLearnStatus', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateSasUserSummaryLearnStatus', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateSasUserSummaryReport($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateSasUserSummaryReport_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryReport_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryReport_result();
    $result->success = $this->handler_->updateSasUserSummaryReport($args->uid);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateSasUserSummaryReport', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateSasUserSummaryReport', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_insertSasUserQuestionLog($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_insertSasUserQuestionLog_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_insertSasUserQuestionLog_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_insertSasUserQuestionLog_result();
    $result->success = $this->handler_->insertSasUserQuestionLog($args->LessonId, $args->scheduleId, $args->uid, $args->type);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'insertSasUserQuestionLog', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('insertSasUserQuestionLog', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateQuestionSasLesson($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateQuestionSasLesson_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateQuestionSasLesson_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateQuestionSasLesson_result();
    $result->success = $this->handler_->updateQuestionSasLesson($args->LessonId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateQuestionSasLesson', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateQuestionSasLesson', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateQuestionSasUser($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateQuestionSasUser_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateQuestionSasUser_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateQuestionSasUser_result();
    $result->success = $this->handler_->updateQuestionSasUser($args->scheduleId, $args->uid);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateQuestionSasUser', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateQuestionSasUser', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateSasUserSummaryOther($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\SasUpdate\SasUpdate_updateSasUserSummaryOther_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryOther_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\SasUpdate\SasUpdate_updateSasUserSummaryOther_result();
    $result->success = $this->handler_->updateSasUserSummaryOther($args->uid);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateSasUserSummaryOther', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateSasUserSummaryOther', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

