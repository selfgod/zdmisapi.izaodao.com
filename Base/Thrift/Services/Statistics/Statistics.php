<?php
namespace Services\Statistics;
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface StatisticsIf {
  /**
   * @param int $scheduleId
   * @return array
   */
  public function getSasScheduleInfo($scheduleId);
  /**
   * @param int $scheduleId
   * @param array $data
   * @return (array)[]
   */
  public function getSasLessonList($scheduleId, array $data);
  /**
   * @param int $scheduleId
   * @param array $data
   * @return (array)[]
   */
  public function getJoinScheduleUsersByDate($scheduleId, array $data);
  /**
   * @param int $scheduleId
   * @return (array)[]
   */
  public function getScheduleLessonInfo($scheduleId);
  /**
   * @param int $scheduleId
   * @param int $lessonId
   * @return array
   */
  public function getSasLessonByLessonId($scheduleId, $lessonId);
  /**
   * @param int $scheduleId
   * @param int $type
   * @param array $whereArr
   * @return (array)[]
   */
  public function getScheduleUserInfo($scheduleId, $type, array $whereArr);
  /**
   * @param int $scheduleId
   * @param array $where
   * @param bool $count
   * @param array $page
   * @param array $order
   * @return (array)[]
   */
  public function getScheduleUserStudyInfo($scheduleId, array $where, $count, array $page, array $order);
  /**
   * @param int $scheduleId
   * @param array $data
   * @param bool $count
   * @param array $page
   * @return ((array)[])[]
   */
  public function getScheduleUserAttendanceInfo($scheduleId, array $data, $count, array $page);
  /**
   * @param int $scheduleId
   * @param int $lessonId
   * @param int $type
   * @param array $where
   * @param bool $count
   * @param array $page
   * @return (array)[]
   */
  public function getScheduleUserAttendanceInfoByLessonId($scheduleId, $lessonId, $type, array $where, $count, array $page);
  /**
   * @param int $scheduleId
   * @return array
   */
  public function getScheduleNowInfo($scheduleId);
  /**
   * @param int $scheduleId
   * @param int $lessonId
   * @return array
   */
  public function getScheduleLessonAbsentAttendanceInfo($scheduleId, $lessonId);
  /**
   * @param int $scheduleId
   * @return array
   */
  public function getSasScheduleList($scheduleId);
  /**
   * @param int $uid
   * @param int $type
   * @return bool
   */
  public function overdueUserUpdate($uid, $type);
  /**
   * @param int $goodsId
   * @param array $where
   * @return (array)[]
   */
  public function getUserInfoFromGoodsId($goodsId, array $where);
  /**
   * @param array $where
   * @return (array)[]
   */
  public function getUserReportInfo(array $where);
  /**
   * @param array $data
   * @return (array)[]
   */
  public function getUserGradeDistribution(array $data);
  /**
   * @param array $data
   * @return (array)[]
   */
  public function getUserGradeList(array $data);
  /**
   * @param array $data
   * @return (array)[]
   */
  public function getUserGraduationList(array $data);
  /**
   * @param array $data
   * @return (array)[]
   */
  public function getUserGraduationInfo(array $data);
  /**
   * @param array $where
   * @return int
   */
  public function getUserReportNumByCondition(array $where);
  /**
   * @return (array)[]
   */
  public function getSaScheduleAvgAtt();
  /**
   * @param array $where
   * @return (array)[]
   */
  public function getAllUserReportNumByCondition(array $where);
  /**
   * @param int $scheduleId
   * @param array $data
   * @return (array)[]
   */
  public function getSasLessonListForMajor($scheduleId, array $data);
  /**
   * @param array $whereArr
   * @return (array)[]
   */
  public function getScheduleUserEveryday(array $whereArr);
  /**
   * @param array $whereArr
   * @return (array)[]
   */
  public function getScheduleUserCount(array $whereArr);
}


class StatisticsClient implements \Services\Statistics\StatisticsIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getSasScheduleInfo($scheduleId)
  {
    $this->send_getSasScheduleInfo($scheduleId);
    return $this->recv_getSasScheduleInfo();
  }

  public function send_getSasScheduleInfo($scheduleId)
  {
    $args = new \Services\Statistics\Statistics_getSasScheduleInfo_args();
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSasScheduleInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSasScheduleInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSasScheduleInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getSasScheduleInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getSasScheduleInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSasScheduleInfo failed: unknown result");
  }

  public function getSasLessonList($scheduleId, array $data)
  {
    $this->send_getSasLessonList($scheduleId, $data);
    return $this->recv_getSasLessonList();
  }

  public function send_getSasLessonList($scheduleId, array $data)
  {
    $args = new \Services\Statistics\Statistics_getSasLessonList_args();
    $args->scheduleId = $scheduleId;
    $args->data = $data;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSasLessonList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSasLessonList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSasLessonList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getSasLessonList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getSasLessonList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSasLessonList failed: unknown result");
  }

  public function getJoinScheduleUsersByDate($scheduleId, array $data)
  {
    $this->send_getJoinScheduleUsersByDate($scheduleId, $data);
    return $this->recv_getJoinScheduleUsersByDate();
  }

  public function send_getJoinScheduleUsersByDate($scheduleId, array $data)
  {
    $args = new \Services\Statistics\Statistics_getJoinScheduleUsersByDate_args();
    $args->scheduleId = $scheduleId;
    $args->data = $data;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getJoinScheduleUsersByDate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getJoinScheduleUsersByDate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getJoinScheduleUsersByDate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getJoinScheduleUsersByDate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getJoinScheduleUsersByDate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getJoinScheduleUsersByDate failed: unknown result");
  }

  public function getScheduleLessonInfo($scheduleId)
  {
    $this->send_getScheduleLessonInfo($scheduleId);
    return $this->recv_getScheduleLessonInfo();
  }

  public function send_getScheduleLessonInfo($scheduleId)
  {
    $args = new \Services\Statistics\Statistics_getScheduleLessonInfo_args();
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getScheduleLessonInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getScheduleLessonInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getScheduleLessonInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getScheduleLessonInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getScheduleLessonInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getScheduleLessonInfo failed: unknown result");
  }

  public function getSasLessonByLessonId($scheduleId, $lessonId)
  {
    $this->send_getSasLessonByLessonId($scheduleId, $lessonId);
    return $this->recv_getSasLessonByLessonId();
  }

  public function send_getSasLessonByLessonId($scheduleId, $lessonId)
  {
    $args = new \Services\Statistics\Statistics_getSasLessonByLessonId_args();
    $args->scheduleId = $scheduleId;
    $args->lessonId = $lessonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSasLessonByLessonId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSasLessonByLessonId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSasLessonByLessonId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getSasLessonByLessonId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getSasLessonByLessonId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSasLessonByLessonId failed: unknown result");
  }

  public function getScheduleUserInfo($scheduleId, $type, array $whereArr)
  {
    $this->send_getScheduleUserInfo($scheduleId, $type, $whereArr);
    return $this->recv_getScheduleUserInfo();
  }

  public function send_getScheduleUserInfo($scheduleId, $type, array $whereArr)
  {
    $args = new \Services\Statistics\Statistics_getScheduleUserInfo_args();
    $args->scheduleId = $scheduleId;
    $args->type = $type;
    $args->whereArr = $whereArr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getScheduleUserInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getScheduleUserInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getScheduleUserInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getScheduleUserInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getScheduleUserInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getScheduleUserInfo failed: unknown result");
  }

  public function getScheduleUserStudyInfo($scheduleId, array $where, $count, array $page, array $order)
  {
    $this->send_getScheduleUserStudyInfo($scheduleId, $where, $count, $page, $order);
    return $this->recv_getScheduleUserStudyInfo();
  }

  public function send_getScheduleUserStudyInfo($scheduleId, array $where, $count, array $page, array $order)
  {
    $args = new \Services\Statistics\Statistics_getScheduleUserStudyInfo_args();
    $args->scheduleId = $scheduleId;
    $args->where = $where;
    $args->count = $count;
    $args->page = $page;
    $args->order = $order;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getScheduleUserStudyInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getScheduleUserStudyInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getScheduleUserStudyInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getScheduleUserStudyInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getScheduleUserStudyInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getScheduleUserStudyInfo failed: unknown result");
  }

  public function getScheduleUserAttendanceInfo($scheduleId, array $data, $count, array $page)
  {
    $this->send_getScheduleUserAttendanceInfo($scheduleId, $data, $count, $page);
    return $this->recv_getScheduleUserAttendanceInfo();
  }

  public function send_getScheduleUserAttendanceInfo($scheduleId, array $data, $count, array $page)
  {
    $args = new \Services\Statistics\Statistics_getScheduleUserAttendanceInfo_args();
    $args->scheduleId = $scheduleId;
    $args->data = $data;
    $args->count = $count;
    $args->page = $page;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getScheduleUserAttendanceInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getScheduleUserAttendanceInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getScheduleUserAttendanceInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getScheduleUserAttendanceInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getScheduleUserAttendanceInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getScheduleUserAttendanceInfo failed: unknown result");
  }

  public function getScheduleUserAttendanceInfoByLessonId($scheduleId, $lessonId, $type, array $where, $count, array $page)
  {
    $this->send_getScheduleUserAttendanceInfoByLessonId($scheduleId, $lessonId, $type, $where, $count, $page);
    return $this->recv_getScheduleUserAttendanceInfoByLessonId();
  }

  public function send_getScheduleUserAttendanceInfoByLessonId($scheduleId, $lessonId, $type, array $where, $count, array $page)
  {
    $args = new \Services\Statistics\Statistics_getScheduleUserAttendanceInfoByLessonId_args();
    $args->scheduleId = $scheduleId;
    $args->lessonId = $lessonId;
    $args->type = $type;
    $args->where = $where;
    $args->count = $count;
    $args->page = $page;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getScheduleUserAttendanceInfoByLessonId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getScheduleUserAttendanceInfoByLessonId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getScheduleUserAttendanceInfoByLessonId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getScheduleUserAttendanceInfoByLessonId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getScheduleUserAttendanceInfoByLessonId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getScheduleUserAttendanceInfoByLessonId failed: unknown result");
  }

  public function getScheduleNowInfo($scheduleId)
  {
    $this->send_getScheduleNowInfo($scheduleId);
    return $this->recv_getScheduleNowInfo();
  }

  public function send_getScheduleNowInfo($scheduleId)
  {
    $args = new \Services\Statistics\Statistics_getScheduleNowInfo_args();
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getScheduleNowInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getScheduleNowInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getScheduleNowInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getScheduleNowInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getScheduleNowInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getScheduleNowInfo failed: unknown result");
  }

  public function getScheduleLessonAbsentAttendanceInfo($scheduleId, $lessonId)
  {
    $this->send_getScheduleLessonAbsentAttendanceInfo($scheduleId, $lessonId);
    return $this->recv_getScheduleLessonAbsentAttendanceInfo();
  }

  public function send_getScheduleLessonAbsentAttendanceInfo($scheduleId, $lessonId)
  {
    $args = new \Services\Statistics\Statistics_getScheduleLessonAbsentAttendanceInfo_args();
    $args->scheduleId = $scheduleId;
    $args->lessonId = $lessonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getScheduleLessonAbsentAttendanceInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getScheduleLessonAbsentAttendanceInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getScheduleLessonAbsentAttendanceInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getScheduleLessonAbsentAttendanceInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getScheduleLessonAbsentAttendanceInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getScheduleLessonAbsentAttendanceInfo failed: unknown result");
  }

  public function getSasScheduleList($scheduleId)
  {
    $this->send_getSasScheduleList($scheduleId);
    return $this->recv_getSasScheduleList();
  }

  public function send_getSasScheduleList($scheduleId)
  {
    $args = new \Services\Statistics\Statistics_getSasScheduleList_args();
    $args->scheduleId = $scheduleId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSasScheduleList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSasScheduleList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSasScheduleList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getSasScheduleList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getSasScheduleList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSasScheduleList failed: unknown result");
  }

  public function overdueUserUpdate($uid, $type)
  {
    $this->send_overdueUserUpdate($uid, $type);
    return $this->recv_overdueUserUpdate();
  }

  public function send_overdueUserUpdate($uid, $type)
  {
    $args = new \Services\Statistics\Statistics_overdueUserUpdate_args();
    $args->uid = $uid;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'overdueUserUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('overdueUserUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_overdueUserUpdate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_overdueUserUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_overdueUserUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("overdueUserUpdate failed: unknown result");
  }

  public function getUserInfoFromGoodsId($goodsId, array $where)
  {
    $this->send_getUserInfoFromGoodsId($goodsId, $where);
    return $this->recv_getUserInfoFromGoodsId();
  }

  public function send_getUserInfoFromGoodsId($goodsId, array $where)
  {
    $args = new \Services\Statistics\Statistics_getUserInfoFromGoodsId_args();
    $args->goodsId = $goodsId;
    $args->where = $where;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserInfoFromGoodsId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserInfoFromGoodsId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserInfoFromGoodsId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getUserInfoFromGoodsId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getUserInfoFromGoodsId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserInfoFromGoodsId failed: unknown result");
  }

  public function getUserReportInfo(array $where)
  {
    $this->send_getUserReportInfo($where);
    return $this->recv_getUserReportInfo();
  }

  public function send_getUserReportInfo(array $where)
  {
    $args = new \Services\Statistics\Statistics_getUserReportInfo_args();
    $args->where = $where;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserReportInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserReportInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserReportInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getUserReportInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getUserReportInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserReportInfo failed: unknown result");
  }

  public function getUserGradeDistribution(array $data)
  {
    $this->send_getUserGradeDistribution($data);
    return $this->recv_getUserGradeDistribution();
  }

  public function send_getUserGradeDistribution(array $data)
  {
    $args = new \Services\Statistics\Statistics_getUserGradeDistribution_args();
    $args->data = $data;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserGradeDistribution', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserGradeDistribution', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserGradeDistribution()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getUserGradeDistribution_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getUserGradeDistribution_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserGradeDistribution failed: unknown result");
  }

  public function getUserGradeList(array $data)
  {
    $this->send_getUserGradeList($data);
    return $this->recv_getUserGradeList();
  }

  public function send_getUserGradeList(array $data)
  {
    $args = new \Services\Statistics\Statistics_getUserGradeList_args();
    $args->data = $data;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserGradeList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserGradeList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserGradeList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getUserGradeList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getUserGradeList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserGradeList failed: unknown result");
  }

  public function getUserGraduationList(array $data)
  {
    $this->send_getUserGraduationList($data);
    return $this->recv_getUserGraduationList();
  }

  public function send_getUserGraduationList(array $data)
  {
    $args = new \Services\Statistics\Statistics_getUserGraduationList_args();
    $args->data = $data;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserGraduationList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserGraduationList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserGraduationList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getUserGraduationList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getUserGraduationList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserGraduationList failed: unknown result");
  }

  public function getUserGraduationInfo(array $data)
  {
    $this->send_getUserGraduationInfo($data);
    return $this->recv_getUserGraduationInfo();
  }

  public function send_getUserGraduationInfo(array $data)
  {
    $args = new \Services\Statistics\Statistics_getUserGraduationInfo_args();
    $args->data = $data;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserGraduationInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserGraduationInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserGraduationInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getUserGraduationInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getUserGraduationInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserGraduationInfo failed: unknown result");
  }

  public function getUserReportNumByCondition(array $where)
  {
    $this->send_getUserReportNumByCondition($where);
    return $this->recv_getUserReportNumByCondition();
  }

  public function send_getUserReportNumByCondition(array $where)
  {
    $args = new \Services\Statistics\Statistics_getUserReportNumByCondition_args();
    $args->where = $where;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserReportNumByCondition', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserReportNumByCondition', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserReportNumByCondition()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getUserReportNumByCondition_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getUserReportNumByCondition_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserReportNumByCondition failed: unknown result");
  }

  public function getSaScheduleAvgAtt()
  {
    $this->send_getSaScheduleAvgAtt();
    return $this->recv_getSaScheduleAvgAtt();
  }

  public function send_getSaScheduleAvgAtt()
  {
    $args = new \Services\Statistics\Statistics_getSaScheduleAvgAtt_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSaScheduleAvgAtt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSaScheduleAvgAtt', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSaScheduleAvgAtt()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getSaScheduleAvgAtt_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getSaScheduleAvgAtt_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSaScheduleAvgAtt failed: unknown result");
  }

  public function getAllUserReportNumByCondition(array $where)
  {
    $this->send_getAllUserReportNumByCondition($where);
    return $this->recv_getAllUserReportNumByCondition();
  }

  public function send_getAllUserReportNumByCondition(array $where)
  {
    $args = new \Services\Statistics\Statistics_getAllUserReportNumByCondition_args();
    $args->where = $where;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllUserReportNumByCondition', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllUserReportNumByCondition', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllUserReportNumByCondition()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getAllUserReportNumByCondition_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getAllUserReportNumByCondition_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllUserReportNumByCondition failed: unknown result");
  }

  public function getSasLessonListForMajor($scheduleId, array $data)
  {
    $this->send_getSasLessonListForMajor($scheduleId, $data);
    return $this->recv_getSasLessonListForMajor();
  }

  public function send_getSasLessonListForMajor($scheduleId, array $data)
  {
    $args = new \Services\Statistics\Statistics_getSasLessonListForMajor_args();
    $args->scheduleId = $scheduleId;
    $args->data = $data;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSasLessonListForMajor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSasLessonListForMajor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSasLessonListForMajor()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getSasLessonListForMajor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getSasLessonListForMajor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSasLessonListForMajor failed: unknown result");
  }

  public function getScheduleUserEveryday(array $whereArr)
  {
    $this->send_getScheduleUserEveryday($whereArr);
    return $this->recv_getScheduleUserEveryday();
  }

  public function send_getScheduleUserEveryday(array $whereArr)
  {
    $args = new \Services\Statistics\Statistics_getScheduleUserEveryday_args();
    $args->whereArr = $whereArr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getScheduleUserEveryday', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getScheduleUserEveryday', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getScheduleUserEveryday()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getScheduleUserEveryday_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getScheduleUserEveryday_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getScheduleUserEveryday failed: unknown result");
  }

  public function getScheduleUserCount(array $whereArr)
  {
    $this->send_getScheduleUserCount($whereArr);
    return $this->recv_getScheduleUserCount();
  }

  public function send_getScheduleUserCount(array $whereArr)
  {
    $args = new \Services\Statistics\Statistics_getScheduleUserCount_args();
    $args->whereArr = $whereArr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getScheduleUserCount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getScheduleUserCount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getScheduleUserCount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Statistics\Statistics_getScheduleUserCount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Statistics\Statistics_getScheduleUserCount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getScheduleUserCount failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class Statistics_getSasScheduleInfo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getSasScheduleInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getSasScheduleInfo_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getSasScheduleInfo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getSasScheduleInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->success[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getSasScheduleInfo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter7 => $viter8)
          {
            $xfer += $output->writeString($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getSasLessonList_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var array
   */
  public $data = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getSasLessonList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->data = array();
            $_size9 = 0;
            $_ktype10 = 0;
            $_vtype11 = 0;
            $xfer += $input->readMapBegin($_ktype10, $_vtype11, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $key14 = '';
              $val15 = '';
              $xfer += $input->readString($key14);
              $xfer += $input->readString($val15);
              $this->data[$key14] = $val15;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getSasLessonList_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->data));
        {
          foreach ($this->data as $kiter16 => $viter17)
          {
            $xfer += $output->writeString($kiter16);
            $xfer += $output->writeString($viter17);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getSasLessonList_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getSasLessonList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size18 = 0;
            $_etype21 = 0;
            $xfer += $input->readListBegin($_etype21, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $elem23 = null;
              $elem23 = array();
              $_size24 = 0;
              $_ktype25 = 0;
              $_vtype26 = 0;
              $xfer += $input->readMapBegin($_ktype25, $_vtype26, $_size24);
              for ($_i28 = 0; $_i28 < $_size24; ++$_i28)
              {
                $key29 = '';
                $val30 = '';
                $xfer += $input->readString($key29);
                $xfer += $input->readString($val30);
                $elem23[$key29] = $val30;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem23;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getSasLessonList_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter31)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter31));
              {
                foreach ($iter31 as $kiter32 => $viter33)
                {
                  $xfer += $output->writeString($kiter32);
                  $xfer += $output->writeString($viter33);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getJoinScheduleUsersByDate_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var array
   */
  public $data = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getJoinScheduleUsersByDate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->data = array();
            $_size34 = 0;
            $_ktype35 = 0;
            $_vtype36 = 0;
            $xfer += $input->readMapBegin($_ktype35, $_vtype36, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $key39 = '';
              $val40 = '';
              $xfer += $input->readString($key39);
              $xfer += $input->readString($val40);
              $this->data[$key39] = $val40;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getJoinScheduleUsersByDate_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->data));
        {
          foreach ($this->data as $kiter41 => $viter42)
          {
            $xfer += $output->writeString($kiter41);
            $xfer += $output->writeString($viter42);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getJoinScheduleUsersByDate_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getJoinScheduleUsersByDate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size43 = 0;
            $_etype46 = 0;
            $xfer += $input->readListBegin($_etype46, $_size43);
            for ($_i47 = 0; $_i47 < $_size43; ++$_i47)
            {
              $elem48 = null;
              $elem48 = array();
              $_size49 = 0;
              $_ktype50 = 0;
              $_vtype51 = 0;
              $xfer += $input->readMapBegin($_ktype50, $_vtype51, $_size49);
              for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
              {
                $key54 = '';
                $val55 = '';
                $xfer += $input->readString($key54);
                $xfer += $input->readString($val55);
                $elem48[$key54] = $val55;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem48;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getJoinScheduleUsersByDate_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter56)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter56));
              {
                foreach ($iter56 as $kiter57 => $viter58)
                {
                  $xfer += $output->writeString($kiter57);
                  $xfer += $output->writeString($viter58);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleLessonInfo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleLessonInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleLessonInfo_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleLessonInfo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleLessonInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size59 = 0;
            $_etype62 = 0;
            $xfer += $input->readListBegin($_etype62, $_size59);
            for ($_i63 = 0; $_i63 < $_size59; ++$_i63)
            {
              $elem64 = null;
              $elem64 = array();
              $_size65 = 0;
              $_ktype66 = 0;
              $_vtype67 = 0;
              $xfer += $input->readMapBegin($_ktype66, $_vtype67, $_size65);
              for ($_i69 = 0; $_i69 < $_size65; ++$_i69)
              {
                $key70 = '';
                $val71 = '';
                $xfer += $input->readString($key70);
                $xfer += $input->readString($val71);
                $elem64[$key70] = $val71;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem64;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleLessonInfo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter72)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter72));
              {
                foreach ($iter72 as $kiter73 => $viter74)
                {
                  $xfer += $output->writeString($kiter73);
                  $xfer += $output->writeString($viter74);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getSasLessonByLessonId_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'lessonId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var int
   */
  public $lessonId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['lessonId'])) {
        $this->lessonId = $vals['lessonId'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getSasLessonByLessonId_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lessonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getSasLessonByLessonId_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lessonId !== null) {
      $xfer += $output->writeFieldBegin('lessonId', TType::I32, 2);
      $xfer += $output->writeI32($this->lessonId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getSasLessonByLessonId_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getSasLessonByLessonId_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size75 = 0;
            $_ktype76 = 0;
            $_vtype77 = 0;
            $xfer += $input->readMapBegin($_ktype76, $_vtype77, $_size75);
            for ($_i79 = 0; $_i79 < $_size75; ++$_i79)
            {
              $key80 = '';
              $val81 = '';
              $xfer += $input->readString($key80);
              $xfer += $input->readString($val81);
              $this->success[$key80] = $val81;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getSasLessonByLessonId_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter82 => $viter83)
          {
            $xfer += $output->writeString($kiter82);
            $xfer += $output->writeString($viter83);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleUserInfo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'whereArr',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var array
   */
  public $whereArr = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['whereArr'])) {
        $this->whereArr = $vals['whereArr'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleUserInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->whereArr = array();
            $_size84 = 0;
            $_ktype85 = 0;
            $_vtype86 = 0;
            $xfer += $input->readMapBegin($_ktype85, $_vtype86, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $key89 = '';
              $val90 = '';
              $xfer += $input->readString($key89);
              $xfer += $input->readString($val90);
              $this->whereArr[$key89] = $val90;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleUserInfo_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->whereArr !== null) {
      if (!is_array($this->whereArr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('whereArr', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->whereArr));
        {
          foreach ($this->whereArr as $kiter91 => $viter92)
          {
            $xfer += $output->writeString($kiter91);
            $xfer += $output->writeString($viter92);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleUserInfo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleUserInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size93 = 0;
            $_etype96 = 0;
            $xfer += $input->readListBegin($_etype96, $_size93);
            for ($_i97 = 0; $_i97 < $_size93; ++$_i97)
            {
              $elem98 = null;
              $elem98 = array();
              $_size99 = 0;
              $_ktype100 = 0;
              $_vtype101 = 0;
              $xfer += $input->readMapBegin($_ktype100, $_vtype101, $_size99);
              for ($_i103 = 0; $_i103 < $_size99; ++$_i103)
              {
                $key104 = '';
                $val105 = '';
                $xfer += $input->readString($key104);
                $xfer += $input->readString($val105);
                $elem98[$key104] = $val105;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem98;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleUserInfo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter106)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter106));
              {
                foreach ($iter106 as $kiter107 => $viter108)
                {
                  $xfer += $output->writeString($kiter107);
                  $xfer += $output->writeString($viter108);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleUserStudyInfo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'where',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    3 => array(
      'var' => 'count',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    4 => array(
      'var' => 'page',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    5 => array(
      'var' => 'order',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var array
   */
  public $where = null;
  /**
   * @var bool
   */
  public $count = null;
  /**
   * @var array
   */
  public $page = null;
  /**
   * @var array
   */
  public $order = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['where'])) {
        $this->where = $vals['where'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleUserStudyInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->where = array();
            $_size109 = 0;
            $_ktype110 = 0;
            $_vtype111 = 0;
            $xfer += $input->readMapBegin($_ktype110, $_vtype111, $_size109);
            for ($_i113 = 0; $_i113 < $_size109; ++$_i113)
            {
              $key114 = '';
              $val115 = '';
              $xfer += $input->readString($key114);
              $xfer += $input->readString($val115);
              $this->where[$key114] = $val115;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->page = array();
            $_size116 = 0;
            $_ktype117 = 0;
            $_vtype118 = 0;
            $xfer += $input->readMapBegin($_ktype117, $_vtype118, $_size116);
            for ($_i120 = 0; $_i120 < $_size116; ++$_i120)
            {
              $key121 = '';
              $val122 = '';
              $xfer += $input->readString($key121);
              $xfer += $input->readString($val122);
              $this->page[$key121] = $val122;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->order = array();
            $_size123 = 0;
            $_ktype124 = 0;
            $_vtype125 = 0;
            $xfer += $input->readMapBegin($_ktype124, $_vtype125, $_size123);
            for ($_i127 = 0; $_i127 < $_size123; ++$_i127)
            {
              $key128 = '';
              $val129 = '';
              $xfer += $input->readString($key128);
              $xfer += $input->readString($val129);
              $this->order[$key128] = $val129;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleUserStudyInfo_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->where !== null) {
      if (!is_array($this->where)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('where', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->where));
        {
          foreach ($this->where as $kiter130 => $viter131)
          {
            $xfer += $output->writeString($kiter130);
            $xfer += $output->writeString($viter131);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::BOOL, 3);
      $xfer += $output->writeBool($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      if (!is_array($this->page)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('page', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->page));
        {
          foreach ($this->page as $kiter132 => $viter133)
          {
            $xfer += $output->writeString($kiter132);
            $xfer += $output->writeString($viter133);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order !== null) {
      if (!is_array($this->order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->order));
        {
          foreach ($this->order as $kiter134 => $viter135)
          {
            $xfer += $output->writeString($kiter134);
            $xfer += $output->writeString($viter135);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleUserStudyInfo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleUserStudyInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size136 = 0;
            $_etype139 = 0;
            $xfer += $input->readListBegin($_etype139, $_size136);
            for ($_i140 = 0; $_i140 < $_size136; ++$_i140)
            {
              $elem141 = null;
              $elem141 = array();
              $_size142 = 0;
              $_ktype143 = 0;
              $_vtype144 = 0;
              $xfer += $input->readMapBegin($_ktype143, $_vtype144, $_size142);
              for ($_i146 = 0; $_i146 < $_size142; ++$_i146)
              {
                $key147 = '';
                $val148 = '';
                $xfer += $input->readString($key147);
                $xfer += $input->readString($val148);
                $elem141[$key147] = $val148;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem141;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleUserStudyInfo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter149)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter149));
              {
                foreach ($iter149 as $kiter150 => $viter151)
                {
                  $xfer += $output->writeString($kiter150);
                  $xfer += $output->writeString($viter151);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleUserAttendanceInfo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    3 => array(
      'var' => 'count',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    4 => array(
      'var' => 'page',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var array
   */
  public $data = null;
  /**
   * @var bool
   */
  public $count = null;
  /**
   * @var array
   */
  public $page = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleUserAttendanceInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->data = array();
            $_size152 = 0;
            $_ktype153 = 0;
            $_vtype154 = 0;
            $xfer += $input->readMapBegin($_ktype153, $_vtype154, $_size152);
            for ($_i156 = 0; $_i156 < $_size152; ++$_i156)
            {
              $key157 = '';
              $val158 = '';
              $xfer += $input->readString($key157);
              $xfer += $input->readString($val158);
              $this->data[$key157] = $val158;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->page = array();
            $_size159 = 0;
            $_ktype160 = 0;
            $_vtype161 = 0;
            $xfer += $input->readMapBegin($_ktype160, $_vtype161, $_size159);
            for ($_i163 = 0; $_i163 < $_size159; ++$_i163)
            {
              $key164 = '';
              $val165 = '';
              $xfer += $input->readString($key164);
              $xfer += $input->readString($val165);
              $this->page[$key164] = $val165;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleUserAttendanceInfo_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->data));
        {
          foreach ($this->data as $kiter166 => $viter167)
          {
            $xfer += $output->writeString($kiter166);
            $xfer += $output->writeString($viter167);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::BOOL, 3);
      $xfer += $output->writeBool($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      if (!is_array($this->page)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('page', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->page));
        {
          foreach ($this->page as $kiter168 => $viter169)
          {
            $xfer += $output->writeString($kiter168);
            $xfer += $output->writeString($viter169);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleUserAttendanceInfo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::LST,
      'elem' => array(
        'type' => TType::LST,
        'etype' => TType::MAP,
        'elem' => array(
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        ),
      ),
    );

  /**
   * @var ((array)[])[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleUserAttendanceInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size170 = 0;
            $_etype173 = 0;
            $xfer += $input->readListBegin($_etype173, $_size170);
            for ($_i174 = 0; $_i174 < $_size170; ++$_i174)
            {
              $elem175 = null;
              $elem175 = array();
              $_size176 = 0;
              $_etype179 = 0;
              $xfer += $input->readListBegin($_etype179, $_size176);
              for ($_i180 = 0; $_i180 < $_size176; ++$_i180)
              {
                $elem181 = null;
                $elem181 = array();
                $_size182 = 0;
                $_ktype183 = 0;
                $_vtype184 = 0;
                $xfer += $input->readMapBegin($_ktype183, $_vtype184, $_size182);
                for ($_i186 = 0; $_i186 < $_size182; ++$_i186)
                {
                  $key187 = '';
                  $val188 = '';
                  $xfer += $input->readString($key187);
                  $xfer += $input->readString($val188);
                  $elem181[$key187] = $val188;
                }
                $xfer += $input->readMapEnd();
                $elem175 []= $elem181;
              }
              $xfer += $input->readListEnd();
              $this->success []= $elem175;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleUserAttendanceInfo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::LST, count($this->success));
        {
          foreach ($this->success as $iter189)
          {
            {
              $output->writeListBegin(TType::MAP, count($iter189));
              {
                foreach ($iter189 as $iter190)
                {
                  {
                    $output->writeMapBegin(TType::STRING, TType::STRING, count($iter190));
                    {
                      foreach ($iter190 as $kiter191 => $viter192)
                      {
                        $xfer += $output->writeString($kiter191);
                        $xfer += $output->writeString($viter192);
                      }
                    }
                    $output->writeMapEnd();
                  }
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleUserAttendanceInfoByLessonId_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'lessonId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'where',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    5 => array(
      'var' => 'count',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    6 => array(
      'var' => 'page',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var int
   */
  public $lessonId = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var array
   */
  public $where = null;
  /**
   * @var bool
   */
  public $count = null;
  /**
   * @var array
   */
  public $page = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['lessonId'])) {
        $this->lessonId = $vals['lessonId'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['where'])) {
        $this->where = $vals['where'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleUserAttendanceInfoByLessonId_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lessonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->where = array();
            $_size193 = 0;
            $_ktype194 = 0;
            $_vtype195 = 0;
            $xfer += $input->readMapBegin($_ktype194, $_vtype195, $_size193);
            for ($_i197 = 0; $_i197 < $_size193; ++$_i197)
            {
              $key198 = '';
              $val199 = '';
              $xfer += $input->readString($key198);
              $xfer += $input->readString($val199);
              $this->where[$key198] = $val199;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::MAP) {
            $this->page = array();
            $_size200 = 0;
            $_ktype201 = 0;
            $_vtype202 = 0;
            $xfer += $input->readMapBegin($_ktype201, $_vtype202, $_size200);
            for ($_i204 = 0; $_i204 < $_size200; ++$_i204)
            {
              $key205 = '';
              $val206 = '';
              $xfer += $input->readString($key205);
              $xfer += $input->readString($val206);
              $this->page[$key205] = $val206;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleUserAttendanceInfoByLessonId_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lessonId !== null) {
      $xfer += $output->writeFieldBegin('lessonId', TType::I32, 2);
      $xfer += $output->writeI32($this->lessonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->where !== null) {
      if (!is_array($this->where)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('where', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->where));
        {
          foreach ($this->where as $kiter207 => $viter208)
          {
            $xfer += $output->writeString($kiter207);
            $xfer += $output->writeString($viter208);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::BOOL, 5);
      $xfer += $output->writeBool($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      if (!is_array($this->page)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('page', TType::MAP, 6);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->page));
        {
          foreach ($this->page as $kiter209 => $viter210)
          {
            $xfer += $output->writeString($kiter209);
            $xfer += $output->writeString($viter210);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleUserAttendanceInfoByLessonId_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleUserAttendanceInfoByLessonId_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size211 = 0;
            $_etype214 = 0;
            $xfer += $input->readListBegin($_etype214, $_size211);
            for ($_i215 = 0; $_i215 < $_size211; ++$_i215)
            {
              $elem216 = null;
              $elem216 = array();
              $_size217 = 0;
              $_ktype218 = 0;
              $_vtype219 = 0;
              $xfer += $input->readMapBegin($_ktype218, $_vtype219, $_size217);
              for ($_i221 = 0; $_i221 < $_size217; ++$_i221)
              {
                $key222 = '';
                $val223 = '';
                $xfer += $input->readString($key222);
                $xfer += $input->readString($val223);
                $elem216[$key222] = $val223;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem216;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleUserAttendanceInfoByLessonId_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter224)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter224));
              {
                foreach ($iter224 as $kiter225 => $viter226)
                {
                  $xfer += $output->writeString($kiter225);
                  $xfer += $output->writeString($viter226);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleNowInfo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleNowInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleNowInfo_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleNowInfo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleNowInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size227 = 0;
            $_ktype228 = 0;
            $_vtype229 = 0;
            $xfer += $input->readMapBegin($_ktype228, $_vtype229, $_size227);
            for ($_i231 = 0; $_i231 < $_size227; ++$_i231)
            {
              $key232 = '';
              $val233 = '';
              $xfer += $input->readString($key232);
              $xfer += $input->readString($val233);
              $this->success[$key232] = $val233;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleNowInfo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter234 => $viter235)
          {
            $xfer += $output->writeString($kiter234);
            $xfer += $output->writeString($viter235);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleLessonAbsentAttendanceInfo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'lessonId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var int
   */
  public $lessonId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['lessonId'])) {
        $this->lessonId = $vals['lessonId'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleLessonAbsentAttendanceInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lessonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleLessonAbsentAttendanceInfo_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lessonId !== null) {
      $xfer += $output->writeFieldBegin('lessonId', TType::I32, 2);
      $xfer += $output->writeI32($this->lessonId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleLessonAbsentAttendanceInfo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleLessonAbsentAttendanceInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size236 = 0;
            $_ktype237 = 0;
            $_vtype238 = 0;
            $xfer += $input->readMapBegin($_ktype237, $_vtype238, $_size236);
            for ($_i240 = 0; $_i240 < $_size236; ++$_i240)
            {
              $key241 = '';
              $val242 = '';
              $xfer += $input->readString($key241);
              $xfer += $input->readString($val242);
              $this->success[$key241] = $val242;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleLessonAbsentAttendanceInfo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter243 => $viter244)
          {
            $xfer += $output->writeString($kiter243);
            $xfer += $output->writeString($viter244);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getSasScheduleList_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getSasScheduleList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getSasScheduleList_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getSasScheduleList_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getSasScheduleList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size245 = 0;
            $_ktype246 = 0;
            $_vtype247 = 0;
            $xfer += $input->readMapBegin($_ktype246, $_vtype247, $_size245);
            for ($_i249 = 0; $_i249 < $_size245; ++$_i249)
            {
              $key250 = '';
              $val251 = '';
              $xfer += $input->readString($key250);
              $xfer += $input->readString($val251);
              $this->success[$key250] = $val251;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getSasScheduleList_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter252 => $viter253)
          {
            $xfer += $output->writeString($kiter252);
            $xfer += $output->writeString($viter253);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_overdueUserUpdate_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $type = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'Statistics_overdueUserUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_overdueUserUpdate_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_overdueUserUpdate_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_overdueUserUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_overdueUserUpdate_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserInfoFromGoodsId_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'goodsId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'where',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $goodsId = null;
  /**
   * @var array
   */
  public $where = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['goodsId'])) {
        $this->goodsId = $vals['goodsId'];
      }
      if (isset($vals['where'])) {
        $this->where = $vals['where'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserInfoFromGoodsId_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goodsId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->where = array();
            $_size254 = 0;
            $_ktype255 = 0;
            $_vtype256 = 0;
            $xfer += $input->readMapBegin($_ktype255, $_vtype256, $_size254);
            for ($_i258 = 0; $_i258 < $_size254; ++$_i258)
            {
              $key259 = '';
              $val260 = '';
              $xfer += $input->readString($key259);
              $xfer += $input->readString($val260);
              $this->where[$key259] = $val260;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserInfoFromGoodsId_args');
    if ($this->goodsId !== null) {
      $xfer += $output->writeFieldBegin('goodsId', TType::I32, 1);
      $xfer += $output->writeI32($this->goodsId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->where !== null) {
      if (!is_array($this->where)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('where', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->where));
        {
          foreach ($this->where as $kiter261 => $viter262)
          {
            $xfer += $output->writeString($kiter261);
            $xfer += $output->writeString($viter262);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserInfoFromGoodsId_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserInfoFromGoodsId_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size263 = 0;
            $_etype266 = 0;
            $xfer += $input->readListBegin($_etype266, $_size263);
            for ($_i267 = 0; $_i267 < $_size263; ++$_i267)
            {
              $elem268 = null;
              $elem268 = array();
              $_size269 = 0;
              $_ktype270 = 0;
              $_vtype271 = 0;
              $xfer += $input->readMapBegin($_ktype270, $_vtype271, $_size269);
              for ($_i273 = 0; $_i273 < $_size269; ++$_i273)
              {
                $key274 = '';
                $val275 = '';
                $xfer += $input->readString($key274);
                $xfer += $input->readString($val275);
                $elem268[$key274] = $val275;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem268;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserInfoFromGoodsId_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter276)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter276));
              {
                foreach ($iter276 as $kiter277 => $viter278)
                {
                  $xfer += $output->writeString($kiter277);
                  $xfer += $output->writeString($viter278);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserReportInfo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'where',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $where = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['where'])) {
        $this->where = $vals['where'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserReportInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->where = array();
            $_size279 = 0;
            $_ktype280 = 0;
            $_vtype281 = 0;
            $xfer += $input->readMapBegin($_ktype280, $_vtype281, $_size279);
            for ($_i283 = 0; $_i283 < $_size279; ++$_i283)
            {
              $key284 = '';
              $val285 = '';
              $xfer += $input->readString($key284);
              $xfer += $input->readString($val285);
              $this->where[$key284] = $val285;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserReportInfo_args');
    if ($this->where !== null) {
      if (!is_array($this->where)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('where', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->where));
        {
          foreach ($this->where as $kiter286 => $viter287)
          {
            $xfer += $output->writeString($kiter286);
            $xfer += $output->writeString($viter287);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserReportInfo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserReportInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size288 = 0;
            $_etype291 = 0;
            $xfer += $input->readListBegin($_etype291, $_size288);
            for ($_i292 = 0; $_i292 < $_size288; ++$_i292)
            {
              $elem293 = null;
              $elem293 = array();
              $_size294 = 0;
              $_ktype295 = 0;
              $_vtype296 = 0;
              $xfer += $input->readMapBegin($_ktype295, $_vtype296, $_size294);
              for ($_i298 = 0; $_i298 < $_size294; ++$_i298)
              {
                $key299 = '';
                $val300 = '';
                $xfer += $input->readString($key299);
                $xfer += $input->readString($val300);
                $elem293[$key299] = $val300;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem293;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserReportInfo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter301)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter301));
              {
                foreach ($iter301 as $kiter302 => $viter303)
                {
                  $xfer += $output->writeString($kiter302);
                  $xfer += $output->writeString($viter303);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserGradeDistribution_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $data = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserGradeDistribution_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->data = array();
            $_size304 = 0;
            $_ktype305 = 0;
            $_vtype306 = 0;
            $xfer += $input->readMapBegin($_ktype305, $_vtype306, $_size304);
            for ($_i308 = 0; $_i308 < $_size304; ++$_i308)
            {
              $key309 = '';
              $val310 = '';
              $xfer += $input->readString($key309);
              $xfer += $input->readString($val310);
              $this->data[$key309] = $val310;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserGradeDistribution_args');
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->data));
        {
          foreach ($this->data as $kiter311 => $viter312)
          {
            $xfer += $output->writeString($kiter311);
            $xfer += $output->writeString($viter312);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserGradeDistribution_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserGradeDistribution_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size313 = 0;
            $_etype316 = 0;
            $xfer += $input->readListBegin($_etype316, $_size313);
            for ($_i317 = 0; $_i317 < $_size313; ++$_i317)
            {
              $elem318 = null;
              $elem318 = array();
              $_size319 = 0;
              $_ktype320 = 0;
              $_vtype321 = 0;
              $xfer += $input->readMapBegin($_ktype320, $_vtype321, $_size319);
              for ($_i323 = 0; $_i323 < $_size319; ++$_i323)
              {
                $key324 = '';
                $val325 = '';
                $xfer += $input->readString($key324);
                $xfer += $input->readString($val325);
                $elem318[$key324] = $val325;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem318;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserGradeDistribution_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter326)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter326));
              {
                foreach ($iter326 as $kiter327 => $viter328)
                {
                  $xfer += $output->writeString($kiter327);
                  $xfer += $output->writeString($viter328);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserGradeList_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $data = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserGradeList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->data = array();
            $_size329 = 0;
            $_ktype330 = 0;
            $_vtype331 = 0;
            $xfer += $input->readMapBegin($_ktype330, $_vtype331, $_size329);
            for ($_i333 = 0; $_i333 < $_size329; ++$_i333)
            {
              $key334 = '';
              $val335 = '';
              $xfer += $input->readString($key334);
              $xfer += $input->readString($val335);
              $this->data[$key334] = $val335;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserGradeList_args');
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->data));
        {
          foreach ($this->data as $kiter336 => $viter337)
          {
            $xfer += $output->writeString($kiter336);
            $xfer += $output->writeString($viter337);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserGradeList_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserGradeList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size338 = 0;
            $_etype341 = 0;
            $xfer += $input->readListBegin($_etype341, $_size338);
            for ($_i342 = 0; $_i342 < $_size338; ++$_i342)
            {
              $elem343 = null;
              $elem343 = array();
              $_size344 = 0;
              $_ktype345 = 0;
              $_vtype346 = 0;
              $xfer += $input->readMapBegin($_ktype345, $_vtype346, $_size344);
              for ($_i348 = 0; $_i348 < $_size344; ++$_i348)
              {
                $key349 = '';
                $val350 = '';
                $xfer += $input->readString($key349);
                $xfer += $input->readString($val350);
                $elem343[$key349] = $val350;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem343;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserGradeList_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter351)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter351));
              {
                foreach ($iter351 as $kiter352 => $viter353)
                {
                  $xfer += $output->writeString($kiter352);
                  $xfer += $output->writeString($viter353);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserGraduationList_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $data = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserGraduationList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->data = array();
            $_size354 = 0;
            $_ktype355 = 0;
            $_vtype356 = 0;
            $xfer += $input->readMapBegin($_ktype355, $_vtype356, $_size354);
            for ($_i358 = 0; $_i358 < $_size354; ++$_i358)
            {
              $key359 = '';
              $val360 = '';
              $xfer += $input->readString($key359);
              $xfer += $input->readString($val360);
              $this->data[$key359] = $val360;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserGraduationList_args');
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->data));
        {
          foreach ($this->data as $kiter361 => $viter362)
          {
            $xfer += $output->writeString($kiter361);
            $xfer += $output->writeString($viter362);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserGraduationList_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserGraduationList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size363 = 0;
            $_etype366 = 0;
            $xfer += $input->readListBegin($_etype366, $_size363);
            for ($_i367 = 0; $_i367 < $_size363; ++$_i367)
            {
              $elem368 = null;
              $elem368 = array();
              $_size369 = 0;
              $_ktype370 = 0;
              $_vtype371 = 0;
              $xfer += $input->readMapBegin($_ktype370, $_vtype371, $_size369);
              for ($_i373 = 0; $_i373 < $_size369; ++$_i373)
              {
                $key374 = '';
                $val375 = '';
                $xfer += $input->readString($key374);
                $xfer += $input->readString($val375);
                $elem368[$key374] = $val375;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem368;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserGraduationList_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter376)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter376));
              {
                foreach ($iter376 as $kiter377 => $viter378)
                {
                  $xfer += $output->writeString($kiter377);
                  $xfer += $output->writeString($viter378);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserGraduationInfo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $data = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserGraduationInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->data = array();
            $_size379 = 0;
            $_ktype380 = 0;
            $_vtype381 = 0;
            $xfer += $input->readMapBegin($_ktype380, $_vtype381, $_size379);
            for ($_i383 = 0; $_i383 < $_size379; ++$_i383)
            {
              $key384 = '';
              $val385 = '';
              $xfer += $input->readString($key384);
              $xfer += $input->readString($val385);
              $this->data[$key384] = $val385;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserGraduationInfo_args');
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->data));
        {
          foreach ($this->data as $kiter386 => $viter387)
          {
            $xfer += $output->writeString($kiter386);
            $xfer += $output->writeString($viter387);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserGraduationInfo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserGraduationInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size388 = 0;
            $_etype391 = 0;
            $xfer += $input->readListBegin($_etype391, $_size388);
            for ($_i392 = 0; $_i392 < $_size388; ++$_i392)
            {
              $elem393 = null;
              $elem393 = array();
              $_size394 = 0;
              $_ktype395 = 0;
              $_vtype396 = 0;
              $xfer += $input->readMapBegin($_ktype395, $_vtype396, $_size394);
              for ($_i398 = 0; $_i398 < $_size394; ++$_i398)
              {
                $key399 = '';
                $val400 = '';
                $xfer += $input->readString($key399);
                $xfer += $input->readString($val400);
                $elem393[$key399] = $val400;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem393;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserGraduationInfo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter401)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter401));
              {
                foreach ($iter401 as $kiter402 => $viter403)
                {
                  $xfer += $output->writeString($kiter402);
                  $xfer += $output->writeString($viter403);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserReportNumByCondition_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'where',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $where = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['where'])) {
        $this->where = $vals['where'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserReportNumByCondition_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->where = array();
            $_size404 = 0;
            $_ktype405 = 0;
            $_vtype406 = 0;
            $xfer += $input->readMapBegin($_ktype405, $_vtype406, $_size404);
            for ($_i408 = 0; $_i408 < $_size404; ++$_i408)
            {
              $key409 = '';
              $val410 = '';
              $xfer += $input->readString($key409);
              $xfer += $input->readString($val410);
              $this->where[$key409] = $val410;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserReportNumByCondition_args');
    if ($this->where !== null) {
      if (!is_array($this->where)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('where', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->where));
        {
          foreach ($this->where as $kiter411 => $viter412)
          {
            $xfer += $output->writeString($kiter411);
            $xfer += $output->writeString($viter412);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getUserReportNumByCondition_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getUserReportNumByCondition_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getUserReportNumByCondition_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getSaScheduleAvgAtt_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'Statistics_getSaScheduleAvgAtt_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getSaScheduleAvgAtt_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getSaScheduleAvgAtt_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getSaScheduleAvgAtt_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size413 = 0;
            $_etype416 = 0;
            $xfer += $input->readListBegin($_etype416, $_size413);
            for ($_i417 = 0; $_i417 < $_size413; ++$_i417)
            {
              $elem418 = null;
              $elem418 = array();
              $_size419 = 0;
              $_ktype420 = 0;
              $_vtype421 = 0;
              $xfer += $input->readMapBegin($_ktype420, $_vtype421, $_size419);
              for ($_i423 = 0; $_i423 < $_size419; ++$_i423)
              {
                $key424 = '';
                $val425 = '';
                $xfer += $input->readString($key424);
                $xfer += $input->readString($val425);
                $elem418[$key424] = $val425;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem418;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getSaScheduleAvgAtt_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter426)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter426));
              {
                foreach ($iter426 as $kiter427 => $viter428)
                {
                  $xfer += $output->writeString($kiter427);
                  $xfer += $output->writeString($viter428);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getAllUserReportNumByCondition_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'where',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $where = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['where'])) {
        $this->where = $vals['where'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getAllUserReportNumByCondition_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->where = array();
            $_size429 = 0;
            $_ktype430 = 0;
            $_vtype431 = 0;
            $xfer += $input->readMapBegin($_ktype430, $_vtype431, $_size429);
            for ($_i433 = 0; $_i433 < $_size429; ++$_i433)
            {
              $key434 = '';
              $val435 = '';
              $xfer += $input->readString($key434);
              $xfer += $input->readString($val435);
              $this->where[$key434] = $val435;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getAllUserReportNumByCondition_args');
    if ($this->where !== null) {
      if (!is_array($this->where)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('where', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->where));
        {
          foreach ($this->where as $kiter436 => $viter437)
          {
            $xfer += $output->writeString($kiter436);
            $xfer += $output->writeString($viter437);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getAllUserReportNumByCondition_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getAllUserReportNumByCondition_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size438 = 0;
            $_etype441 = 0;
            $xfer += $input->readListBegin($_etype441, $_size438);
            for ($_i442 = 0; $_i442 < $_size438; ++$_i442)
            {
              $elem443 = null;
              $elem443 = array();
              $_size444 = 0;
              $_ktype445 = 0;
              $_vtype446 = 0;
              $xfer += $input->readMapBegin($_ktype445, $_vtype446, $_size444);
              for ($_i448 = 0; $_i448 < $_size444; ++$_i448)
              {
                $key449 = '';
                $val450 = '';
                $xfer += $input->readString($key449);
                $xfer += $input->readString($val450);
                $elem443[$key449] = $val450;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem443;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getAllUserReportNumByCondition_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter451)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter451));
              {
                foreach ($iter451 as $kiter452 => $viter453)
                {
                  $xfer += $output->writeString($kiter452);
                  $xfer += $output->writeString($viter453);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getSasLessonListForMajor_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduleId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $scheduleId = null;
  /**
   * @var array
   */
  public $data = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduleId'])) {
        $this->scheduleId = $vals['scheduleId'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getSasLessonListForMajor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scheduleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->data = array();
            $_size454 = 0;
            $_ktype455 = 0;
            $_vtype456 = 0;
            $xfer += $input->readMapBegin($_ktype455, $_vtype456, $_size454);
            for ($_i458 = 0; $_i458 < $_size454; ++$_i458)
            {
              $key459 = '';
              $val460 = '';
              $xfer += $input->readString($key459);
              $xfer += $input->readString($val460);
              $this->data[$key459] = $val460;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getSasLessonListForMajor_args');
    if ($this->scheduleId !== null) {
      $xfer += $output->writeFieldBegin('scheduleId', TType::I32, 1);
      $xfer += $output->writeI32($this->scheduleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->data));
        {
          foreach ($this->data as $kiter461 => $viter462)
          {
            $xfer += $output->writeString($kiter461);
            $xfer += $output->writeString($viter462);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getSasLessonListForMajor_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getSasLessonListForMajor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size463 = 0;
            $_etype466 = 0;
            $xfer += $input->readListBegin($_etype466, $_size463);
            for ($_i467 = 0; $_i467 < $_size463; ++$_i467)
            {
              $elem468 = null;
              $elem468 = array();
              $_size469 = 0;
              $_ktype470 = 0;
              $_vtype471 = 0;
              $xfer += $input->readMapBegin($_ktype470, $_vtype471, $_size469);
              for ($_i473 = 0; $_i473 < $_size469; ++$_i473)
              {
                $key474 = '';
                $val475 = '';
                $xfer += $input->readString($key474);
                $xfer += $input->readString($val475);
                $elem468[$key474] = $val475;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem468;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getSasLessonListForMajor_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter476)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter476));
              {
                foreach ($iter476 as $kiter477 => $viter478)
                {
                  $xfer += $output->writeString($kiter477);
                  $xfer += $output->writeString($viter478);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleUserEveryday_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'whereArr',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $whereArr = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['whereArr'])) {
        $this->whereArr = $vals['whereArr'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleUserEveryday_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->whereArr = array();
            $_size479 = 0;
            $_ktype480 = 0;
            $_vtype481 = 0;
            $xfer += $input->readMapBegin($_ktype480, $_vtype481, $_size479);
            for ($_i483 = 0; $_i483 < $_size479; ++$_i483)
            {
              $key484 = '';
              $val485 = '';
              $xfer += $input->readString($key484);
              $xfer += $input->readString($val485);
              $this->whereArr[$key484] = $val485;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleUserEveryday_args');
    if ($this->whereArr !== null) {
      if (!is_array($this->whereArr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('whereArr', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->whereArr));
        {
          foreach ($this->whereArr as $kiter486 => $viter487)
          {
            $xfer += $output->writeString($kiter486);
            $xfer += $output->writeString($viter487);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleUserEveryday_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleUserEveryday_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size488 = 0;
            $_etype491 = 0;
            $xfer += $input->readListBegin($_etype491, $_size488);
            for ($_i492 = 0; $_i492 < $_size488; ++$_i492)
            {
              $elem493 = null;
              $elem493 = array();
              $_size494 = 0;
              $_ktype495 = 0;
              $_vtype496 = 0;
              $xfer += $input->readMapBegin($_ktype495, $_vtype496, $_size494);
              for ($_i498 = 0; $_i498 < $_size494; ++$_i498)
              {
                $key499 = '';
                $val500 = '';
                $xfer += $input->readString($key499);
                $xfer += $input->readString($val500);
                $elem493[$key499] = $val500;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem493;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleUserEveryday_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter501)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter501));
              {
                foreach ($iter501 as $kiter502 => $viter503)
                {
                  $xfer += $output->writeString($kiter502);
                  $xfer += $output->writeString($viter503);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleUserCount_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'whereArr',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $whereArr = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['whereArr'])) {
        $this->whereArr = $vals['whereArr'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleUserCount_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->whereArr = array();
            $_size504 = 0;
            $_ktype505 = 0;
            $_vtype506 = 0;
            $xfer += $input->readMapBegin($_ktype505, $_vtype506, $_size504);
            for ($_i508 = 0; $_i508 < $_size504; ++$_i508)
            {
              $key509 = '';
              $val510 = '';
              $xfer += $input->readString($key509);
              $xfer += $input->readString($val510);
              $this->whereArr[$key509] = $val510;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleUserCount_args');
    if ($this->whereArr !== null) {
      if (!is_array($this->whereArr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('whereArr', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->whereArr));
        {
          foreach ($this->whereArr as $kiter511 => $viter512)
          {
            $xfer += $output->writeString($kiter511);
            $xfer += $output->writeString($viter512);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Statistics_getScheduleUserCount_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Statistics_getScheduleUserCount_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size513 = 0;
            $_etype516 = 0;
            $xfer += $input->readListBegin($_etype516, $_size513);
            for ($_i517 = 0; $_i517 < $_size513; ++$_i517)
            {
              $elem518 = null;
              $elem518 = array();
              $_size519 = 0;
              $_ktype520 = 0;
              $_vtype521 = 0;
              $xfer += $input->readMapBegin($_ktype520, $_vtype521, $_size519);
              for ($_i523 = 0; $_i523 < $_size519; ++$_i523)
              {
                $key524 = '';
                $val525 = '';
                $xfer += $input->readString($key524);
                $xfer += $input->readString($val525);
                $elem518[$key524] = $val525;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem518;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Statistics_getScheduleUserCount_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter526)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter526));
              {
                foreach ($iter526 as $kiter527 => $viter528)
                {
                  $xfer += $output->writeString($kiter527);
                  $xfer += $output->writeString($viter528);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StatisticsProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_getSasScheduleInfo($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getSasScheduleInfo_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getSasScheduleInfo_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getSasScheduleInfo_result();
    $result->success = $this->handler_->getSasScheduleInfo($args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSasScheduleInfo', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSasScheduleInfo', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getSasLessonList($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getSasLessonList_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getSasLessonList_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getSasLessonList_result();
    $result->success = $this->handler_->getSasLessonList($args->scheduleId, $args->data);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSasLessonList', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSasLessonList', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getJoinScheduleUsersByDate($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getJoinScheduleUsersByDate_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getJoinScheduleUsersByDate_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getJoinScheduleUsersByDate_result();
    $result->success = $this->handler_->getJoinScheduleUsersByDate($args->scheduleId, $args->data);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getJoinScheduleUsersByDate', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getJoinScheduleUsersByDate', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getScheduleLessonInfo($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getScheduleLessonInfo_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getScheduleLessonInfo_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getScheduleLessonInfo_result();
    $result->success = $this->handler_->getScheduleLessonInfo($args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getScheduleLessonInfo', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getScheduleLessonInfo', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getSasLessonByLessonId($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getSasLessonByLessonId_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getSasLessonByLessonId_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getSasLessonByLessonId_result();
    $result->success = $this->handler_->getSasLessonByLessonId($args->scheduleId, $args->lessonId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSasLessonByLessonId', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSasLessonByLessonId', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getScheduleUserInfo($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getScheduleUserInfo_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getScheduleUserInfo_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getScheduleUserInfo_result();
    $result->success = $this->handler_->getScheduleUserInfo($args->scheduleId, $args->type, $args->whereArr);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getScheduleUserInfo', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getScheduleUserInfo', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getScheduleUserStudyInfo($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getScheduleUserStudyInfo_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getScheduleUserStudyInfo_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getScheduleUserStudyInfo_result();
    $result->success = $this->handler_->getScheduleUserStudyInfo($args->scheduleId, $args->where, $args->count, $args->page, $args->order);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getScheduleUserStudyInfo', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getScheduleUserStudyInfo', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getScheduleUserAttendanceInfo($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getScheduleUserAttendanceInfo_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getScheduleUserAttendanceInfo_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getScheduleUserAttendanceInfo_result();
    $result->success = $this->handler_->getScheduleUserAttendanceInfo($args->scheduleId, $args->data, $args->count, $args->page);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getScheduleUserAttendanceInfo', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getScheduleUserAttendanceInfo', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getScheduleUserAttendanceInfoByLessonId($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getScheduleUserAttendanceInfoByLessonId_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getScheduleUserAttendanceInfoByLessonId_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getScheduleUserAttendanceInfoByLessonId_result();
    $result->success = $this->handler_->getScheduleUserAttendanceInfoByLessonId($args->scheduleId, $args->lessonId, $args->type, $args->where, $args->count, $args->page);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getScheduleUserAttendanceInfoByLessonId', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getScheduleUserAttendanceInfoByLessonId', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getScheduleNowInfo($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getScheduleNowInfo_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getScheduleNowInfo_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getScheduleNowInfo_result();
    $result->success = $this->handler_->getScheduleNowInfo($args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getScheduleNowInfo', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getScheduleNowInfo', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getScheduleLessonAbsentAttendanceInfo($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getScheduleLessonAbsentAttendanceInfo_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getScheduleLessonAbsentAttendanceInfo_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getScheduleLessonAbsentAttendanceInfo_result();
    $result->success = $this->handler_->getScheduleLessonAbsentAttendanceInfo($args->scheduleId, $args->lessonId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getScheduleLessonAbsentAttendanceInfo', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getScheduleLessonAbsentAttendanceInfo', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getSasScheduleList($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getSasScheduleList_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getSasScheduleList_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getSasScheduleList_result();
    $result->success = $this->handler_->getSasScheduleList($args->scheduleId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSasScheduleList', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSasScheduleList', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_overdueUserUpdate($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_overdueUserUpdate_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_overdueUserUpdate_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_overdueUserUpdate_result();
    $result->success = $this->handler_->overdueUserUpdate($args->uid, $args->type);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'overdueUserUpdate', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('overdueUserUpdate', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getUserInfoFromGoodsId($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getUserInfoFromGoodsId_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getUserInfoFromGoodsId_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getUserInfoFromGoodsId_result();
    $result->success = $this->handler_->getUserInfoFromGoodsId($args->goodsId, $args->where);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getUserInfoFromGoodsId', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getUserInfoFromGoodsId', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getUserReportInfo($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getUserReportInfo_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getUserReportInfo_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getUserReportInfo_result();
    $result->success = $this->handler_->getUserReportInfo($args->where);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getUserReportInfo', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getUserReportInfo', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getUserGradeDistribution($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getUserGradeDistribution_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getUserGradeDistribution_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getUserGradeDistribution_result();
    $result->success = $this->handler_->getUserGradeDistribution($args->data);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getUserGradeDistribution', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getUserGradeDistribution', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getUserGradeList($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getUserGradeList_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getUserGradeList_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getUserGradeList_result();
    $result->success = $this->handler_->getUserGradeList($args->data);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getUserGradeList', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getUserGradeList', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getUserGraduationList($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getUserGraduationList_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getUserGraduationList_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getUserGraduationList_result();
    $result->success = $this->handler_->getUserGraduationList($args->data);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getUserGraduationList', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getUserGraduationList', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getUserGraduationInfo($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getUserGraduationInfo_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getUserGraduationInfo_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getUserGraduationInfo_result();
    $result->success = $this->handler_->getUserGraduationInfo($args->data);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getUserGraduationInfo', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getUserGraduationInfo', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getUserReportNumByCondition($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getUserReportNumByCondition_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getUserReportNumByCondition_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getUserReportNumByCondition_result();
    $result->success = $this->handler_->getUserReportNumByCondition($args->where);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getUserReportNumByCondition', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getUserReportNumByCondition', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getSaScheduleAvgAtt($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getSaScheduleAvgAtt_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getSaScheduleAvgAtt_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getSaScheduleAvgAtt_result();
    $result->success = $this->handler_->getSaScheduleAvgAtt();
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSaScheduleAvgAtt', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSaScheduleAvgAtt', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getAllUserReportNumByCondition($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getAllUserReportNumByCondition_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getAllUserReportNumByCondition_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getAllUserReportNumByCondition_result();
    $result->success = $this->handler_->getAllUserReportNumByCondition($args->where);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getAllUserReportNumByCondition', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getAllUserReportNumByCondition', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getSasLessonListForMajor($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getSasLessonListForMajor_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getSasLessonListForMajor_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getSasLessonListForMajor_result();
    $result->success = $this->handler_->getSasLessonListForMajor($args->scheduleId, $args->data);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSasLessonListForMajor', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSasLessonListForMajor', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getScheduleUserEveryday($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getScheduleUserEveryday_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getScheduleUserEveryday_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getScheduleUserEveryday_result();
    $result->success = $this->handler_->getScheduleUserEveryday($args->whereArr);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getScheduleUserEveryday', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getScheduleUserEveryday', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getScheduleUserCount($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Statistics\Statistics_getScheduleUserCount_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Statistics\Statistics_getScheduleUserCount_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Statistics\Statistics_getScheduleUserCount_result();
    $result->success = $this->handler_->getScheduleUserCount($args->whereArr);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getScheduleUserCount', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getScheduleUserCount', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

