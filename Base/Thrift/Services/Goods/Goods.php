<?php
namespace Services\Goods;
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface GoodsIf {
  /**
   * @param int $uid
   * @param int $goodsId
   * @return array
   */
  public function getUserGoodsInfo($uid, $goodsId);
  /**
   * @param int $uid
   * @param int $goodsId
   * @param int $activateType
   * @return \Services\Goods\JsonResult
   */
  public function activateGoods($uid, $goodsId, $activateType);
  /**
   * @param int $uid
   * @param array $params
   * @return array
   */
  public function getUserGoodsByMode($uid, array $params);
  /**
   * @param int $uid
   * @param int $goods_id
   * @param int $market_sign
   * @param int $pay_price
   * @param int $use_zy
   * @param int $origin_goods_id
   * @return \Services\Goods\JsonResult
   */
  public function createUserGoods($uid, $goods_id, $market_sign, $pay_price, $use_zy, $origin_goods_id);
  /**
   * @param int $goodsId
   * @return array
   */
  public function getGoodsDetail($goodsId);
  /**
   * @param int[] $goodsids
   * @return (array)[]
   */
  public function getGoods(array $goodsids);
  /**
   * @param int $uid
   * @param int $goods_id
   * @param int $market_sign
   * @param int $pay_price
   * @param int $use_zy
   * @param int $origin_goods_id
   * @param int $modify_user
   * @return \Services\Goods\JsonResult
   */
  public function zdmisCreateUserGoods($uid, $goods_id, $market_sign, $pay_price, $use_zy, $origin_goods_id, $modify_user);
  /**
   * @param int $goods_id
   * @param array $params
   * @return bool
   */
  public function updateGoods($goods_id, array $params);
  /**
   * @param int $id
   * @return array
   */
  public function getUserGoodsRenewal($id);
  /**
   * @param int $renewalId
   * @param array $params
   * @return \Services\Goods\JsonResult
   */
  public function userGoodsRenewal($renewalId, array $params);
  /**
   * @param int $userGoodsId
   * @param array $params
   * @return int
   */
  public function getRenewalTimeLen($userGoodsId, array $params);
  /**
   * @param int $renewalId
   * @param array $params
   * @return bool
   */
  public function updateUserGoodsRenewal($renewalId, array $params);
}


class GoodsClient implements \Services\Goods\GoodsIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getUserGoodsInfo($uid, $goodsId)
  {
    $this->send_getUserGoodsInfo($uid, $goodsId);
    return $this->recv_getUserGoodsInfo();
  }

  public function send_getUserGoodsInfo($uid, $goodsId)
  {
    $args = new \Services\Goods\Goods_getUserGoodsInfo_args();
    $args->uid = $uid;
    $args->goodsId = $goodsId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserGoodsInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserGoodsInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserGoodsInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Goods\Goods_getUserGoodsInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Goods\Goods_getUserGoodsInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserGoodsInfo failed: unknown result");
  }

  public function activateGoods($uid, $goodsId, $activateType)
  {
    $this->send_activateGoods($uid, $goodsId, $activateType);
    return $this->recv_activateGoods();
  }

  public function send_activateGoods($uid, $goodsId, $activateType)
  {
    $args = new \Services\Goods\Goods_activateGoods_args();
    $args->uid = $uid;
    $args->goodsId = $goodsId;
    $args->activateType = $activateType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'activateGoods', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('activateGoods', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_activateGoods()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Goods\Goods_activateGoods_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Goods\Goods_activateGoods_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("activateGoods failed: unknown result");
  }

  public function getUserGoodsByMode($uid, array $params)
  {
    $this->send_getUserGoodsByMode($uid, $params);
    return $this->recv_getUserGoodsByMode();
  }

  public function send_getUserGoodsByMode($uid, array $params)
  {
    $args = new \Services\Goods\Goods_getUserGoodsByMode_args();
    $args->uid = $uid;
    $args->params = $params;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserGoodsByMode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserGoodsByMode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserGoodsByMode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Goods\Goods_getUserGoodsByMode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Goods\Goods_getUserGoodsByMode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserGoodsByMode failed: unknown result");
  }

  public function createUserGoods($uid, $goods_id, $market_sign, $pay_price, $use_zy, $origin_goods_id)
  {
    $this->send_createUserGoods($uid, $goods_id, $market_sign, $pay_price, $use_zy, $origin_goods_id);
    return $this->recv_createUserGoods();
  }

  public function send_createUserGoods($uid, $goods_id, $market_sign, $pay_price, $use_zy, $origin_goods_id)
  {
    $args = new \Services\Goods\Goods_createUserGoods_args();
    $args->uid = $uid;
    $args->goods_id = $goods_id;
    $args->market_sign = $market_sign;
    $args->pay_price = $pay_price;
    $args->use_zy = $use_zy;
    $args->origin_goods_id = $origin_goods_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createUserGoods', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createUserGoods', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createUserGoods()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Goods\Goods_createUserGoods_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Goods\Goods_createUserGoods_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("createUserGoods failed: unknown result");
  }

  public function getGoodsDetail($goodsId)
  {
    $this->send_getGoodsDetail($goodsId);
    return $this->recv_getGoodsDetail();
  }

  public function send_getGoodsDetail($goodsId)
  {
    $args = new \Services\Goods\Goods_getGoodsDetail_args();
    $args->goodsId = $goodsId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGoodsDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGoodsDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGoodsDetail()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Goods\Goods_getGoodsDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Goods\Goods_getGoodsDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGoodsDetail failed: unknown result");
  }

  public function getGoods(array $goodsids)
  {
    $this->send_getGoods($goodsids);
    return $this->recv_getGoods();
  }

  public function send_getGoods(array $goodsids)
  {
    $args = new \Services\Goods\Goods_getGoods_args();
    $args->goodsids = $goodsids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGoods', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGoods', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGoods()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Goods\Goods_getGoods_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Goods\Goods_getGoods_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGoods failed: unknown result");
  }

  public function zdmisCreateUserGoods($uid, $goods_id, $market_sign, $pay_price, $use_zy, $origin_goods_id, $modify_user)
  {
    $this->send_zdmisCreateUserGoods($uid, $goods_id, $market_sign, $pay_price, $use_zy, $origin_goods_id, $modify_user);
    return $this->recv_zdmisCreateUserGoods();
  }

  public function send_zdmisCreateUserGoods($uid, $goods_id, $market_sign, $pay_price, $use_zy, $origin_goods_id, $modify_user)
  {
    $args = new \Services\Goods\Goods_zdmisCreateUserGoods_args();
    $args->uid = $uid;
    $args->goods_id = $goods_id;
    $args->market_sign = $market_sign;
    $args->pay_price = $pay_price;
    $args->use_zy = $use_zy;
    $args->origin_goods_id = $origin_goods_id;
    $args->modify_user = $modify_user;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'zdmisCreateUserGoods', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('zdmisCreateUserGoods', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_zdmisCreateUserGoods()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Goods\Goods_zdmisCreateUserGoods_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Goods\Goods_zdmisCreateUserGoods_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("zdmisCreateUserGoods failed: unknown result");
  }

  public function updateGoods($goods_id, array $params)
  {
    $this->send_updateGoods($goods_id, $params);
    return $this->recv_updateGoods();
  }

  public function send_updateGoods($goods_id, array $params)
  {
    $args = new \Services\Goods\Goods_updateGoods_args();
    $args->goods_id = $goods_id;
    $args->params = $params;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateGoods', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateGoods', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateGoods()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Goods\Goods_updateGoods_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Goods\Goods_updateGoods_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateGoods failed: unknown result");
  }

  public function getUserGoodsRenewal($id)
  {
    $this->send_getUserGoodsRenewal($id);
    return $this->recv_getUserGoodsRenewal();
  }

  public function send_getUserGoodsRenewal($id)
  {
    $args = new \Services\Goods\Goods_getUserGoodsRenewal_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserGoodsRenewal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserGoodsRenewal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserGoodsRenewal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Goods\Goods_getUserGoodsRenewal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Goods\Goods_getUserGoodsRenewal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserGoodsRenewal failed: unknown result");
  }

  public function userGoodsRenewal($renewalId, array $params)
  {
    $this->send_userGoodsRenewal($renewalId, $params);
    return $this->recv_userGoodsRenewal();
  }

  public function send_userGoodsRenewal($renewalId, array $params)
  {
    $args = new \Services\Goods\Goods_userGoodsRenewal_args();
    $args->renewalId = $renewalId;
    $args->params = $params;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'userGoodsRenewal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('userGoodsRenewal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_userGoodsRenewal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Goods\Goods_userGoodsRenewal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Goods\Goods_userGoodsRenewal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("userGoodsRenewal failed: unknown result");
  }

  public function getRenewalTimeLen($userGoodsId, array $params)
  {
    $this->send_getRenewalTimeLen($userGoodsId, $params);
    return $this->recv_getRenewalTimeLen();
  }

  public function send_getRenewalTimeLen($userGoodsId, array $params)
  {
    $args = new \Services\Goods\Goods_getRenewalTimeLen_args();
    $args->userGoodsId = $userGoodsId;
    $args->params = $params;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRenewalTimeLen', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRenewalTimeLen', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRenewalTimeLen()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Goods\Goods_getRenewalTimeLen_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Goods\Goods_getRenewalTimeLen_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getRenewalTimeLen failed: unknown result");
  }

  public function updateUserGoodsRenewal($renewalId, array $params)
  {
    $this->send_updateUserGoodsRenewal($renewalId, $params);
    return $this->recv_updateUserGoodsRenewal();
  }

  public function send_updateUserGoodsRenewal($renewalId, array $params)
  {
    $args = new \Services\Goods\Goods_updateUserGoodsRenewal_args();
    $args->renewalId = $renewalId;
    $args->params = $params;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateUserGoodsRenewal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateUserGoodsRenewal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateUserGoodsRenewal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\Goods\Goods_updateUserGoodsRenewal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\Goods\Goods_updateUserGoodsRenewal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateUserGoodsRenewal failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class Goods_getUserGoodsInfo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'goodsId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $goodsId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['goodsId'])) {
        $this->goodsId = $vals['goodsId'];
      }
    }
  }

  public function getName() {
    return 'Goods_getUserGoodsInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goodsId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_getUserGoodsInfo_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goodsId !== null) {
      $xfer += $output->writeFieldBegin('goodsId', TType::I32, 2);
      $xfer += $output->writeI32($this->goodsId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_getUserGoodsInfo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Goods_getUserGoodsInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size9 = 0;
            $_ktype10 = 0;
            $_vtype11 = 0;
            $xfer += $input->readMapBegin($_ktype10, $_vtype11, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $key14 = '';
              $val15 = '';
              $xfer += $input->readString($key14);
              $xfer += $input->readString($val15);
              $this->success[$key14] = $val15;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_getUserGoodsInfo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter16 => $viter17)
          {
            $xfer += $output->writeString($kiter16);
            $xfer += $output->writeString($viter17);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_activateGoods_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'goodsId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'activateType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $goodsId = null;
  /**
   * @var int
   */
  public $activateType = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['goodsId'])) {
        $this->goodsId = $vals['goodsId'];
      }
      if (isset($vals['activateType'])) {
        $this->activateType = $vals['activateType'];
      }
    }
  }

  public function getName() {
    return 'Goods_activateGoods_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goodsId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activateType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_activateGoods_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goodsId !== null) {
      $xfer += $output->writeFieldBegin('goodsId', TType::I32, 2);
      $xfer += $output->writeI32($this->goodsId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activateType !== null) {
      $xfer += $output->writeFieldBegin('activateType', TType::I32, 3);
      $xfer += $output->writeI32($this->activateType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_activateGoods_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Services\Goods\JsonResult',
      ),
    );

  /**
   * @var \Services\Goods\JsonResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Goods_activateGoods_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\Goods\JsonResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_activateGoods_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_getUserGoodsByMode_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'params',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var array
   */
  public $params = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
    }
  }

  public function getName() {
    return 'Goods_getUserGoodsByMode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size18 = 0;
            $_ktype19 = 0;
            $_vtype20 = 0;
            $xfer += $input->readMapBegin($_ktype19, $_vtype20, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $key23 = '';
              $val24 = '';
              $xfer += $input->readString($key23);
              $xfer += $input->readString($val24);
              $this->params[$key23] = $val24;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_getUserGoodsByMode_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter25 => $viter26)
          {
            $xfer += $output->writeString($kiter25);
            $xfer += $output->writeString($viter26);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_getUserGoodsByMode_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I32,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I32,
        ),
      ),
    );

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Goods_getUserGoodsByMode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size27 = 0;
            $_ktype28 = 0;
            $_vtype29 = 0;
            $xfer += $input->readMapBegin($_ktype28, $_vtype29, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $key32 = '';
              $val33 = 0;
              $xfer += $input->readString($key32);
              $xfer += $input->readI32($val33);
              $this->success[$key32] = $val33;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_getUserGoodsByMode_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->success));
        {
          foreach ($this->success as $kiter34 => $viter35)
          {
            $xfer += $output->writeString($kiter34);
            $xfer += $output->writeI32($viter35);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_createUserGoods_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'goods_id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'market_sign',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'pay_price',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'use_zy',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'origin_goods_id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $goods_id = null;
  /**
   * @var int
   */
  public $market_sign = null;
  /**
   * @var int
   */
  public $pay_price = null;
  /**
   * @var int
   */
  public $use_zy = null;
  /**
   * @var int
   */
  public $origin_goods_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['goods_id'])) {
        $this->goods_id = $vals['goods_id'];
      }
      if (isset($vals['market_sign'])) {
        $this->market_sign = $vals['market_sign'];
      }
      if (isset($vals['pay_price'])) {
        $this->pay_price = $vals['pay_price'];
      }
      if (isset($vals['use_zy'])) {
        $this->use_zy = $vals['use_zy'];
      }
      if (isset($vals['origin_goods_id'])) {
        $this->origin_goods_id = $vals['origin_goods_id'];
      }
    }
  }

  public function getName() {
    return 'Goods_createUserGoods_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->market_sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pay_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->use_zy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->origin_goods_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_createUserGoods_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_id !== null) {
      $xfer += $output->writeFieldBegin('goods_id', TType::I32, 2);
      $xfer += $output->writeI32($this->goods_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->market_sign !== null) {
      $xfer += $output->writeFieldBegin('market_sign', TType::I32, 3);
      $xfer += $output->writeI32($this->market_sign);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pay_price !== null) {
      $xfer += $output->writeFieldBegin('pay_price', TType::I32, 4);
      $xfer += $output->writeI32($this->pay_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->use_zy !== null) {
      $xfer += $output->writeFieldBegin('use_zy', TType::I32, 5);
      $xfer += $output->writeI32($this->use_zy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->origin_goods_id !== null) {
      $xfer += $output->writeFieldBegin('origin_goods_id', TType::I32, 6);
      $xfer += $output->writeI32($this->origin_goods_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_createUserGoods_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Services\Goods\JsonResult',
      ),
    );

  /**
   * @var \Services\Goods\JsonResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Goods_createUserGoods_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\Goods\JsonResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_createUserGoods_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_getGoodsDetail_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'goodsId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $goodsId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['goodsId'])) {
        $this->goodsId = $vals['goodsId'];
      }
    }
  }

  public function getName() {
    return 'Goods_getGoodsDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goodsId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_getGoodsDetail_args');
    if ($this->goodsId !== null) {
      $xfer += $output->writeFieldBegin('goodsId', TType::I32, 1);
      $xfer += $output->writeI32($this->goodsId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_getGoodsDetail_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Goods_getGoodsDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size36 = 0;
            $_ktype37 = 0;
            $_vtype38 = 0;
            $xfer += $input->readMapBegin($_ktype37, $_vtype38, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $key41 = '';
              $val42 = '';
              $xfer += $input->readString($key41);
              $xfer += $input->readString($val42);
              $this->success[$key41] = $val42;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_getGoodsDetail_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter43 => $viter44)
          {
            $xfer += $output->writeString($kiter43);
            $xfer += $output->writeString($viter44);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_getGoods_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'goodsids',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    );

  /**
   * @var int[]
   */
  public $goodsids = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['goodsids'])) {
        $this->goodsids = $vals['goodsids'];
      }
    }
  }

  public function getName() {
    return 'Goods_getGoods_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->goodsids = array();
            $_size45 = 0;
            $_etype48 = 0;
            $xfer += $input->readListBegin($_etype48, $_size45);
            for ($_i49 = 0; $_i49 < $_size45; ++$_i49)
            {
              $elem50 = null;
              $xfer += $input->readI32($elem50);
              $this->goodsids []= $elem50;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_getGoods_args');
    if ($this->goodsids !== null) {
      if (!is_array($this->goodsids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('goodsids', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->goodsids));
        {
          foreach ($this->goodsids as $iter51)
          {
            $xfer += $output->writeI32($iter51);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_getGoods_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::MAP,
      'elem' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    );

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Goods_getGoods_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size52 = 0;
            $_etype55 = 0;
            $xfer += $input->readListBegin($_etype55, $_size52);
            for ($_i56 = 0; $_i56 < $_size52; ++$_i56)
            {
              $elem57 = null;
              $elem57 = array();
              $_size58 = 0;
              $_ktype59 = 0;
              $_vtype60 = 0;
              $xfer += $input->readMapBegin($_ktype59, $_vtype60, $_size58);
              for ($_i62 = 0; $_i62 < $_size58; ++$_i62)
              {
                $key63 = '';
                $val64 = '';
                $xfer += $input->readString($key63);
                $xfer += $input->readString($val64);
                $elem57[$key63] = $val64;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem57;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_getGoods_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter65)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter65));
              {
                foreach ($iter65 as $kiter66 => $viter67)
                {
                  $xfer += $output->writeString($kiter66);
                  $xfer += $output->writeString($viter67);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_zdmisCreateUserGoods_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'goods_id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'market_sign',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'pay_price',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'use_zy',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'origin_goods_id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'modify_user',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $goods_id = null;
  /**
   * @var int
   */
  public $market_sign = null;
  /**
   * @var int
   */
  public $pay_price = null;
  /**
   * @var int
   */
  public $use_zy = null;
  /**
   * @var int
   */
  public $origin_goods_id = null;
  /**
   * @var int
   */
  public $modify_user = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['goods_id'])) {
        $this->goods_id = $vals['goods_id'];
      }
      if (isset($vals['market_sign'])) {
        $this->market_sign = $vals['market_sign'];
      }
      if (isset($vals['pay_price'])) {
        $this->pay_price = $vals['pay_price'];
      }
      if (isset($vals['use_zy'])) {
        $this->use_zy = $vals['use_zy'];
      }
      if (isset($vals['origin_goods_id'])) {
        $this->origin_goods_id = $vals['origin_goods_id'];
      }
      if (isset($vals['modify_user'])) {
        $this->modify_user = $vals['modify_user'];
      }
    }
  }

  public function getName() {
    return 'Goods_zdmisCreateUserGoods_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->market_sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pay_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->use_zy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->origin_goods_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->modify_user);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_zdmisCreateUserGoods_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_id !== null) {
      $xfer += $output->writeFieldBegin('goods_id', TType::I32, 2);
      $xfer += $output->writeI32($this->goods_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->market_sign !== null) {
      $xfer += $output->writeFieldBegin('market_sign', TType::I32, 3);
      $xfer += $output->writeI32($this->market_sign);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pay_price !== null) {
      $xfer += $output->writeFieldBegin('pay_price', TType::I32, 4);
      $xfer += $output->writeI32($this->pay_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->use_zy !== null) {
      $xfer += $output->writeFieldBegin('use_zy', TType::I32, 5);
      $xfer += $output->writeI32($this->use_zy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->origin_goods_id !== null) {
      $xfer += $output->writeFieldBegin('origin_goods_id', TType::I32, 6);
      $xfer += $output->writeI32($this->origin_goods_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modify_user !== null) {
      $xfer += $output->writeFieldBegin('modify_user', TType::I32, 7);
      $xfer += $output->writeI32($this->modify_user);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_zdmisCreateUserGoods_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Services\Goods\JsonResult',
      ),
    );

  /**
   * @var \Services\Goods\JsonResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Goods_zdmisCreateUserGoods_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\Goods\JsonResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_zdmisCreateUserGoods_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_updateGoods_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'goods_id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'params',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $goods_id = null;
  /**
   * @var array
   */
  public $params = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['goods_id'])) {
        $this->goods_id = $vals['goods_id'];
      }
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
    }
  }

  public function getName() {
    return 'Goods_updateGoods_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size68 = 0;
            $_ktype69 = 0;
            $_vtype70 = 0;
            $xfer += $input->readMapBegin($_ktype69, $_vtype70, $_size68);
            for ($_i72 = 0; $_i72 < $_size68; ++$_i72)
            {
              $key73 = '';
              $val74 = '';
              $xfer += $input->readString($key73);
              $xfer += $input->readString($val74);
              $this->params[$key73] = $val74;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_updateGoods_args');
    if ($this->goods_id !== null) {
      $xfer += $output->writeFieldBegin('goods_id', TType::I32, 1);
      $xfer += $output->writeI32($this->goods_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter75 => $viter76)
          {
            $xfer += $output->writeString($kiter75);
            $xfer += $output->writeString($viter76);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_updateGoods_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Goods_updateGoods_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_updateGoods_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_getUserGoodsRenewal_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'Goods_getUserGoodsRenewal_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_getUserGoodsRenewal_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_getUserGoodsRenewal_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Goods_getUserGoodsRenewal_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size77 = 0;
            $_ktype78 = 0;
            $_vtype79 = 0;
            $xfer += $input->readMapBegin($_ktype78, $_vtype79, $_size77);
            for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
            {
              $key82 = '';
              $val83 = '';
              $xfer += $input->readString($key82);
              $xfer += $input->readString($val83);
              $this->success[$key82] = $val83;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_getUserGoodsRenewal_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter84 => $viter85)
          {
            $xfer += $output->writeString($kiter84);
            $xfer += $output->writeString($viter85);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_userGoodsRenewal_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'renewalId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'params',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $renewalId = null;
  /**
   * @var array
   */
  public $params = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['renewalId'])) {
        $this->renewalId = $vals['renewalId'];
      }
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
    }
  }

  public function getName() {
    return 'Goods_userGoodsRenewal_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->renewalId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size86 = 0;
            $_ktype87 = 0;
            $_vtype88 = 0;
            $xfer += $input->readMapBegin($_ktype87, $_vtype88, $_size86);
            for ($_i90 = 0; $_i90 < $_size86; ++$_i90)
            {
              $key91 = '';
              $val92 = '';
              $xfer += $input->readString($key91);
              $xfer += $input->readString($val92);
              $this->params[$key91] = $val92;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_userGoodsRenewal_args');
    if ($this->renewalId !== null) {
      $xfer += $output->writeFieldBegin('renewalId', TType::I32, 1);
      $xfer += $output->writeI32($this->renewalId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter93 => $viter94)
          {
            $xfer += $output->writeString($kiter93);
            $xfer += $output->writeString($viter94);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_userGoodsRenewal_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Services\Goods\JsonResult',
      ),
    );

  /**
   * @var \Services\Goods\JsonResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Goods_userGoodsRenewal_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\Goods\JsonResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_userGoodsRenewal_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_getRenewalTimeLen_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'userGoodsId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'params',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $userGoodsId = null;
  /**
   * @var array
   */
  public $params = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['userGoodsId'])) {
        $this->userGoodsId = $vals['userGoodsId'];
      }
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
    }
  }

  public function getName() {
    return 'Goods_getRenewalTimeLen_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userGoodsId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size95 = 0;
            $_ktype96 = 0;
            $_vtype97 = 0;
            $xfer += $input->readMapBegin($_ktype96, $_vtype97, $_size95);
            for ($_i99 = 0; $_i99 < $_size95; ++$_i99)
            {
              $key100 = '';
              $val101 = '';
              $xfer += $input->readString($key100);
              $xfer += $input->readString($val101);
              $this->params[$key100] = $val101;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_getRenewalTimeLen_args');
    if ($this->userGoodsId !== null) {
      $xfer += $output->writeFieldBegin('userGoodsId', TType::I32, 1);
      $xfer += $output->writeI32($this->userGoodsId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter102 => $viter103)
          {
            $xfer += $output->writeString($kiter102);
            $xfer += $output->writeString($viter103);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_getRenewalTimeLen_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Goods_getRenewalTimeLen_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_getRenewalTimeLen_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_updateUserGoodsRenewal_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'renewalId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'params',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $renewalId = null;
  /**
   * @var array
   */
  public $params = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['renewalId'])) {
        $this->renewalId = $vals['renewalId'];
      }
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
    }
  }

  public function getName() {
    return 'Goods_updateUserGoodsRenewal_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->renewalId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size104 = 0;
            $_ktype105 = 0;
            $_vtype106 = 0;
            $xfer += $input->readMapBegin($_ktype105, $_vtype106, $_size104);
            for ($_i108 = 0; $_i108 < $_size104; ++$_i108)
            {
              $key109 = '';
              $val110 = '';
              $xfer += $input->readString($key109);
              $xfer += $input->readString($val110);
              $this->params[$key109] = $val110;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_updateUserGoodsRenewal_args');
    if ($this->renewalId !== null) {
      $xfer += $output->writeFieldBegin('renewalId', TType::I32, 1);
      $xfer += $output->writeI32($this->renewalId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter111 => $viter112)
          {
            $xfer += $output->writeString($kiter111);
            $xfer += $output->writeString($viter112);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods_updateUserGoodsRenewal_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Goods_updateUserGoodsRenewal_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods_updateUserGoodsRenewal_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_getUserGoodsInfo($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Goods\Goods_getUserGoodsInfo_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Goods\Goods_getUserGoodsInfo_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Goods\Goods_getUserGoodsInfo_result();
    $result->success = $this->handler_->getUserGoodsInfo($args->uid, $args->goodsId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getUserGoodsInfo', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getUserGoodsInfo', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_activateGoods($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Goods\Goods_activateGoods_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Goods\Goods_activateGoods_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Goods\Goods_activateGoods_result();
    $result->success = $this->handler_->activateGoods($args->uid, $args->goodsId, $args->activateType);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'activateGoods', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('activateGoods', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getUserGoodsByMode($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Goods\Goods_getUserGoodsByMode_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Goods\Goods_getUserGoodsByMode_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Goods\Goods_getUserGoodsByMode_result();
    $result->success = $this->handler_->getUserGoodsByMode($args->uid, $args->params);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getUserGoodsByMode', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getUserGoodsByMode', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_createUserGoods($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Goods\Goods_createUserGoods_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Goods\Goods_createUserGoods_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Goods\Goods_createUserGoods_result();
    $result->success = $this->handler_->createUserGoods($args->uid, $args->goods_id, $args->market_sign, $args->pay_price, $args->use_zy, $args->origin_goods_id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'createUserGoods', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('createUserGoods', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getGoodsDetail($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Goods\Goods_getGoodsDetail_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Goods\Goods_getGoodsDetail_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Goods\Goods_getGoodsDetail_result();
    $result->success = $this->handler_->getGoodsDetail($args->goodsId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getGoodsDetail', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getGoodsDetail', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getGoods($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Goods\Goods_getGoods_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Goods\Goods_getGoods_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Goods\Goods_getGoods_result();
    $result->success = $this->handler_->getGoods($args->goodsids);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getGoods', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getGoods', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_zdmisCreateUserGoods($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Goods\Goods_zdmisCreateUserGoods_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Goods\Goods_zdmisCreateUserGoods_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Goods\Goods_zdmisCreateUserGoods_result();
    $result->success = $this->handler_->zdmisCreateUserGoods($args->uid, $args->goods_id, $args->market_sign, $args->pay_price, $args->use_zy, $args->origin_goods_id, $args->modify_user);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'zdmisCreateUserGoods', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('zdmisCreateUserGoods', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateGoods($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Goods\Goods_updateGoods_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Goods\Goods_updateGoods_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Goods\Goods_updateGoods_result();
    $result->success = $this->handler_->updateGoods($args->goods_id, $args->params);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateGoods', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateGoods', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getUserGoodsRenewal($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Goods\Goods_getUserGoodsRenewal_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Goods\Goods_getUserGoodsRenewal_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Goods\Goods_getUserGoodsRenewal_result();
    $result->success = $this->handler_->getUserGoodsRenewal($args->id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getUserGoodsRenewal', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getUserGoodsRenewal', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_userGoodsRenewal($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Goods\Goods_userGoodsRenewal_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Goods\Goods_userGoodsRenewal_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Goods\Goods_userGoodsRenewal_result();
    $result->success = $this->handler_->userGoodsRenewal($args->renewalId, $args->params);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'userGoodsRenewal', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('userGoodsRenewal', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getRenewalTimeLen($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Goods\Goods_getRenewalTimeLen_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Goods\Goods_getRenewalTimeLen_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Goods\Goods_getRenewalTimeLen_result();
    $result->success = $this->handler_->getRenewalTimeLen($args->userGoodsId, $args->params);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getRenewalTimeLen', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getRenewalTimeLen', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateUserGoodsRenewal($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\Services\Goods\Goods_updateUserGoodsRenewal_args', $input->isStrictRead());
    }
    else
    {
      $args = new \Services\Goods\Goods_updateUserGoodsRenewal_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \Services\Goods\Goods_updateUserGoodsRenewal_result();
    $result->success = $this->handler_->updateUserGoodsRenewal($args->renewalId, $args->params);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateUserGoodsRenewal', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateUserGoodsRenewal', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

